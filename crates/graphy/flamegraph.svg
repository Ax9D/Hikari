<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="626"><g><title>[libnvidia-glcore.so.495.46] (2 samples, 0.32%)</title><rect x="0.0000%" y="213" width="0.3195%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (1 samples, 0.16%)</title><rect x="0.3195%" y="213" width="0.1597%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.5695%" y="223.50"></text></g><g><title>__futex_abstimed_wait_common64 (10 samples, 1.60%)</title><rect x="0.4792%" y="213" width="1.5974%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="10"/><text x="0.7292%" y="223.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.16%)</title><rect x="2.0767%" y="213" width="0.1597%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="1"/><text x="2.3267%" y="223.50"></text></g><g><title>__vdso_gettimeofday (1 samples, 0.16%)</title><rect x="2.2364%" y="213" width="0.1597%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="1"/><text x="2.4864%" y="223.50"></text></g><g><title>[vkrt]_Analysis (16 samples, 2.56%)</title><rect x="0.0000%" y="229" width="2.5559%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="16"/><text x="0.2500%" y="239.50">[v..</text></g><g><title>gettimeofday@plt (1 samples, 0.16%)</title><rect x="2.3962%" y="213" width="0.1597%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="1"/><text x="2.6462%" y="223.50"></text></g><g><title>__GI___libc_free (1 samples, 0.16%)</title><rect x="2.5559%" y="213" width="0.1597%" height="15" fill="rgb(228,23,34)" fg:x="16" fg:w="1"/><text x="2.8059%" y="223.50"></text></g><g><title>__GI___sched_yield (3 samples, 0.48%)</title><rect x="2.7157%" y="213" width="0.4792%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="3"/><text x="2.9657%" y="223.50"></text></g><g><title>__libc_send (4 samples, 0.64%)</title><rect x="3.1949%" y="213" width="0.6390%" height="15" fill="rgb(220,122,19)" fg:x="20" fg:w="4"/><text x="3.4449%" y="223.50"></text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.16%)</title><rect x="3.8339%" y="213" width="0.1597%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="1"/><text x="4.0839%" y="223.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.16%)</title><rect x="3.9936%" y="213" width="0.1597%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="1"/><text x="4.2436%" y="223.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.32%)</title><rect x="4.1534%" y="213" width="0.3195%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="2"/><text x="4.4034%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.32%)</title><rect x="4.1534%" y="197" width="0.3195%" height="15" fill="rgb(206,188,39)" fg:x="26" fg:w="2"/><text x="4.4034%" y="207.50"></text></g><g><title>_int_free (3 samples, 0.48%)</title><rect x="4.4728%" y="213" width="0.4792%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="3"/><text x="4.7228%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.48%)</title><rect x="5.2716%" y="197" width="0.4792%" height="15" fill="rgb(231,73,38)" fg:x="33" fg:w="3"/><text x="5.5216%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.48%)</title><rect x="5.2716%" y="181" width="0.4792%" height="15" fill="rgb(225,20,46)" fg:x="33" fg:w="3"/><text x="5.5216%" y="191.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (51 samples, 8.15%)</title><rect x="4.9521%" y="213" width="8.1470%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="51"/><text x="5.2021%" y="223.50">crossbeam_c..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (46 samples, 7.35%)</title><rect x="5.7508%" y="197" width="7.3482%" height="15" fill="rgb(221,200,47)" fg:x="36" fg:w="46"/><text x="6.0008%" y="207.50">crossbeam_..</text></g><g><title>core::sync::atomic::spin_loop_hint (46 samples, 7.35%)</title><rect x="5.7508%" y="181" width="7.3482%" height="15" fill="rgb(226,26,5)" fg:x="36" fg:w="46"/><text x="6.0008%" y="191.50">core::sync..</text></g><g><title>core::hint::spin_loop (46 samples, 7.35%)</title><rect x="5.7508%" y="165" width="7.3482%" height="15" fill="rgb(249,33,26)" fg:x="36" fg:w="46"/><text x="6.0008%" y="175.50">core::hint..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (46 samples, 7.35%)</title><rect x="5.7508%" y="149" width="7.3482%" height="15" fill="rgb(235,183,28)" fg:x="36" fg:w="46"/><text x="6.0008%" y="159.50">core::core..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (1 samples, 0.16%)</title><rect x="13.0990%" y="213" width="0.1597%" height="15" fill="rgb(221,5,38)" fg:x="82" fg:w="1"/><text x="13.3490%" y="223.50"></text></g><g><title>crossbeam_channel::context::Context::with (3 samples, 0.48%)</title><rect x="13.4185%" y="197" width="0.4792%" height="15" fill="rgb(247,18,42)" fg:x="84" fg:w="3"/><text x="13.6685%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.48%)</title><rect x="13.4185%" y="181" width="0.4792%" height="15" fill="rgb(241,131,45)" fg:x="84" fg:w="3"/><text x="13.6685%" y="191.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (3 samples, 0.48%)</title><rect x="13.4185%" y="165" width="0.4792%" height="15" fill="rgb(249,31,29)" fg:x="84" fg:w="3"/><text x="13.6685%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.48%)</title><rect x="13.4185%" y="149" width="0.4792%" height="15" fill="rgb(225,111,53)" fg:x="84" fg:w="3"/><text x="13.6685%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.48%)</title><rect x="13.4185%" y="133" width="0.4792%" height="15" fill="rgb(238,160,17)" fg:x="84" fg:w="3"/><text x="13.6685%" y="143.50"></text></g><g><title>core::mem::replace (3 samples, 0.48%)</title><rect x="13.4185%" y="117" width="0.4792%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="3"/><text x="13.6685%" y="127.50"></text></g><g><title>core::ptr::read (3 samples, 0.48%)</title><rect x="13.4185%" y="101" width="0.4792%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="3"/><text x="13.6685%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1 samples, 0.16%)</title><rect x="14.0575%" y="181" width="0.1597%" height="15" fill="rgb(209,103,24)" fg:x="88" fg:w="1"/><text x="14.3075%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.16%)</title><rect x="14.0575%" y="165" width="0.1597%" height="15" fill="rgb(229,88,8)" fg:x="88" fg:w="1"/><text x="14.3075%" y="175.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (3 samples, 0.48%)</title><rect x="13.8978%" y="197" width="0.4792%" height="15" fill="rgb(213,181,19)" fg:x="87" fg:w="3"/><text x="14.1478%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.16%)</title><rect x="14.2173%" y="181" width="0.1597%" height="15" fill="rgb(254,191,54)" fg:x="89" fg:w="1"/><text x="14.4673%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.16%)</title><rect x="14.2173%" y="165" width="0.1597%" height="15" fill="rgb(241,83,37)" fg:x="89" fg:w="1"/><text x="14.4673%" y="175.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (46 samples, 7.35%)</title><rect x="13.2588%" y="213" width="7.3482%" height="15" fill="rgb(233,36,39)" fg:x="83" fg:w="46"/><text x="13.5088%" y="223.50">crossbeam_..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (39 samples, 6.23%)</title><rect x="14.3770%" y="197" width="6.2300%" height="15" fill="rgb(226,3,54)" fg:x="90" fg:w="39"/><text x="14.6270%" y="207.50">crossbea..</text></g><g><title>core::sync::atomic::spin_loop_hint (39 samples, 6.23%)</title><rect x="14.3770%" y="181" width="6.2300%" height="15" fill="rgb(245,192,40)" fg:x="90" fg:w="39"/><text x="14.6270%" y="191.50">core::sy..</text></g><g><title>core::hint::spin_loop (39 samples, 6.23%)</title><rect x="14.3770%" y="165" width="6.2300%" height="15" fill="rgb(238,167,29)" fg:x="90" fg:w="39"/><text x="14.6270%" y="175.50">core::hi..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (39 samples, 6.23%)</title><rect x="14.3770%" y="149" width="6.2300%" height="15" fill="rgb(232,182,51)" fg:x="90" fg:w="39"/><text x="14.6270%" y="159.50">core::co..</text></g><g><title>crossbeam_channel::waker::SyncWaker::register (1 samples, 0.16%)</title><rect x="20.6070%" y="213" width="0.1597%" height="15" fill="rgb(231,60,39)" fg:x="129" fg:w="1"/><text x="20.8570%" y="223.50"></text></g><g><title>crossbeam_channel::waker::Waker::register (1 samples, 0.16%)</title><rect x="20.6070%" y="197" width="0.1597%" height="15" fill="rgb(208,69,12)" fg:x="129" fg:w="1"/><text x="20.8570%" y="207.50"></text></g><g><title>crossbeam_channel::waker::Waker::register_with_packet (1 samples, 0.16%)</title><rect x="20.6070%" y="181" width="0.1597%" height="15" fill="rgb(235,93,37)" fg:x="129" fg:w="1"/><text x="20.8570%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.16%)</title><rect x="20.6070%" y="165" width="0.1597%" height="15" fill="rgb(213,116,39)" fg:x="129" fg:w="1"/><text x="20.8570%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.16%)</title><rect x="20.6070%" y="149" width="0.1597%" height="15" fill="rgb(222,207,29)" fg:x="129" fg:w="1"/><text x="20.8570%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (2 samples, 0.32%)</title><rect x="20.7668%" y="197" width="0.3195%" height="15" fill="rgb(206,96,30)" fg:x="130" fg:w="2"/><text x="21.0168%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.32%)</title><rect x="20.7668%" y="181" width="0.3195%" height="15" fill="rgb(218,138,4)" fg:x="130" fg:w="2"/><text x="21.0168%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.32%)</title><rect x="20.7668%" y="165" width="0.3195%" height="15" fill="rgb(250,191,14)" fg:x="130" fg:w="2"/><text x="21.0168%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.32%)</title><rect x="20.7668%" y="149" width="0.3195%" height="15" fill="rgb(239,60,40)" fg:x="130" fg:w="2"/><text x="21.0168%" y="159.50"></text></g><g><title>puffin_http::server::client_loop (4 samples, 0.64%)</title><rect x="20.7668%" y="213" width="0.6390%" height="15" fill="rgb(206,27,48)" fg:x="130" fg:w="4"/><text x="21.0168%" y="223.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.32%)</title><rect x="21.0863%" y="197" width="0.3195%" height="15" fill="rgb(225,35,8)" fg:x="132" fg:w="2"/><text x="21.3363%" y="207.50"></text></g><g><title>std::net::udp::UdpSocket::send (3 samples, 0.48%)</title><rect x="21.4058%" y="213" width="0.4792%" height="15" fill="rgb(250,213,24)" fg:x="134" fg:w="3"/><text x="21.6558%" y="223.50"></text></g><g><title>std::sys_common::net::UdpSocket::send (1 samples, 0.16%)</title><rect x="21.7252%" y="197" width="0.1597%" height="15" fill="rgb(247,123,22)" fg:x="136" fg:w="1"/><text x="21.9752%" y="207.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.16%)</title><rect x="21.7252%" y="181" width="0.1597%" height="15" fill="rgb(231,138,38)" fg:x="136" fg:w="1"/><text x="21.9752%" y="191.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.16%)</title><rect x="21.7252%" y="165" width="0.1597%" height="15" fill="rgb(231,145,46)" fg:x="136" fg:w="1"/><text x="21.9752%" y="175.50"></text></g><g><title>std::thread::park (2 samples, 0.32%)</title><rect x="21.8850%" y="213" width="0.3195%" height="15" fill="rgb(251,118,11)" fg:x="137" fg:w="2"/><text x="22.1350%" y="223.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (2 samples, 0.32%)</title><rect x="21.8850%" y="197" width="0.3195%" height="15" fill="rgb(217,147,25)" fg:x="137" fg:w="2"/><text x="22.1350%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicI32::compare_exchange (2 samples, 0.32%)</title><rect x="21.8850%" y="181" width="0.3195%" height="15" fill="rgb(247,81,37)" fg:x="137" fg:w="2"/><text x="22.1350%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.32%)</title><rect x="21.8850%" y="165" width="0.3195%" height="15" fill="rgb(209,12,38)" fg:x="137" fg:w="2"/><text x="22.1350%" y="175.50"></text></g><g><title>puffin-server-c (137 samples, 21.88%)</title><rect x="2.5559%" y="229" width="21.8850%" height="15" fill="rgb(227,1,9)" fg:x="16" fg:w="137"/><text x="2.8059%" y="239.50">puffin-server-c</text></g><g><title>syscall (14 samples, 2.24%)</title><rect x="22.2045%" y="213" width="2.2364%" height="15" fill="rgb(248,47,43)" fg:x="139" fg:w="14"/><text x="22.4545%" y="223.50">s..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="24.4409%" y="213" width="0.1597%" height="15" fill="rgb(221,10,30)" fg:x="153" fg:w="1"/><text x="24.6909%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;crossbeam_channel::waker::Entry,alloc::alloc::Global&gt;&gt; (1 samples, 0.16%)</title><rect x="24.4409%" y="197" width="0.1597%" height="15" fill="rgb(210,229,1)" fg:x="153" fg:w="1"/><text x="24.6909%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="24.4409%" y="181" width="0.1597%" height="15" fill="rgb(222,148,37)" fg:x="153" fg:w="1"/><text x="24.6909%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.16%)</title><rect x="24.4409%" y="165" width="0.1597%" height="15" fill="rgb(234,67,33)" fg:x="153" fg:w="1"/><text x="24.6909%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.16%)</title><rect x="24.4409%" y="149" width="0.1597%" height="15" fill="rgb(247,98,35)" fg:x="153" fg:w="1"/><text x="24.6909%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="24.4409%" y="133" width="0.1597%" height="15" fill="rgb(247,138,52)" fg:x="153" fg:w="1"/><text x="24.6909%" y="143.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="24.4409%" y="117" width="0.1597%" height="15" fill="rgb(213,79,30)" fg:x="153" fg:w="1"/><text x="24.6909%" y="127.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="24.4409%" y="101" width="0.1597%" height="15" fill="rgb(246,177,23)" fg:x="153" fg:w="1"/><text x="24.6909%" y="111.50"></text></g><g><title>&lt;zstd::stream::zio::writer::Writer&lt;W,D&gt; as std::io::Write&gt;::write (1 samples, 0.16%)</title><rect x="24.6006%" y="213" width="0.1597%" height="15" fill="rgb(230,62,27)" fg:x="154" fg:w="1"/><text x="24.8506%" y="223.50"></text></g><g><title>&lt;zstd_safe::CCtx as core::default::Default&gt;::default (1 samples, 0.16%)</title><rect x="24.7604%" y="213" width="0.1597%" height="15" fill="rgb(216,154,8)" fg:x="155" fg:w="1"/><text x="25.0104%" y="223.50"></text></g><g><title>zstd_safe::create_cctx (1 samples, 0.16%)</title><rect x="24.7604%" y="197" width="0.1597%" height="15" fill="rgb(244,35,45)" fg:x="155" fg:w="1"/><text x="25.0104%" y="207.50"></text></g><g><title>zstd_safe::CCtx::create (1 samples, 0.16%)</title><rect x="24.7604%" y="181" width="0.1597%" height="15" fill="rgb(251,115,12)" fg:x="155" fg:w="1"/><text x="25.0104%" y="191.50"></text></g><g><title>FSE_buildCTable_wksp (8 samples, 1.28%)</title><rect x="24.9201%" y="213" width="1.2780%" height="15" fill="rgb(240,54,50)" fg:x="156" fg:w="8"/><text x="25.1701%" y="223.50"></text></g><g><title>BIT_highbit32 (1 samples, 0.16%)</title><rect x="26.0383%" y="197" width="0.1597%" height="15" fill="rgb(233,84,52)" fg:x="163" fg:w="1"/><text x="26.2883%" y="207.50"></text></g><g><title>FSE_normalizeCount (2 samples, 0.32%)</title><rect x="26.1981%" y="213" width="0.3195%" height="15" fill="rgb(207,117,47)" fg:x="164" fg:w="2"/><text x="26.4481%" y="223.50"></text></g><g><title>HIST_count_wksp (5 samples, 0.80%)</title><rect x="26.5176%" y="213" width="0.7987%" height="15" fill="rgb(249,43,39)" fg:x="166" fg:w="5"/><text x="26.7676%" y="223.50"></text></g><g><title>HIST_countFast_wksp (5 samples, 0.80%)</title><rect x="26.5176%" y="197" width="0.7987%" height="15" fill="rgb(209,38,44)" fg:x="166" fg:w="5"/><text x="26.7676%" y="207.50"></text></g><g><title>HIST_count_simple (5 samples, 0.80%)</title><rect x="26.5176%" y="181" width="0.7987%" height="15" fill="rgb(236,212,23)" fg:x="166" fg:w="5"/><text x="26.7676%" y="191.50"></text></g><g><title>HUF_buildCTableFromTree (2 samples, 0.32%)</title><rect x="27.3163%" y="197" width="0.3195%" height="15" fill="rgb(242,79,21)" fg:x="171" fg:w="2"/><text x="27.5663%" y="207.50"></text></g><g><title>HUF_buildTree (5 samples, 0.80%)</title><rect x="27.6358%" y="197" width="0.7987%" height="15" fill="rgb(211,96,35)" fg:x="173" fg:w="5"/><text x="27.8858%" y="207.50"></text></g><g><title>HUF_buildCTable_wksp (8 samples, 1.28%)</title><rect x="27.3163%" y="213" width="1.2780%" height="15" fill="rgb(253,215,40)" fg:x="171" fg:w="8"/><text x="27.5663%" y="223.50"></text></g><g><title>HUF_sort (1 samples, 0.16%)</title><rect x="28.4345%" y="197" width="0.1597%" height="15" fill="rgb(211,81,21)" fg:x="178" fg:w="1"/><text x="28.6845%" y="207.50"></text></g><g><title>HUF_compress1X_usingCTable_internal_bmi2 (3 samples, 0.48%)</title><rect x="28.5942%" y="213" width="0.4792%" height="15" fill="rgb(208,190,38)" fg:x="179" fg:w="3"/><text x="28.8442%" y="223.50"></text></g><g><title>HUF_compress1X_usingCTable_internal_body (1 samples, 0.16%)</title><rect x="28.9137%" y="197" width="0.1597%" height="15" fill="rgb(235,213,38)" fg:x="181" fg:w="1"/><text x="29.1637%" y="207.50"></text></g><g><title>HUF_compress1X_usingCTable_internal_body_loop (1 samples, 0.16%)</title><rect x="28.9137%" y="181" width="0.1597%" height="15" fill="rgb(237,122,38)" fg:x="181" fg:w="1"/><text x="29.1637%" y="191.50"></text></g><g><title>HUF_encodeSymbol (1 samples, 0.16%)</title><rect x="28.9137%" y="165" width="0.1597%" height="15" fill="rgb(244,218,35)" fg:x="181" fg:w="1"/><text x="29.1637%" y="175.50"></text></g><g><title>HUF_addBits (1 samples, 0.16%)</title><rect x="28.9137%" y="149" width="0.1597%" height="15" fill="rgb(240,68,47)" fg:x="181" fg:w="1"/><text x="29.1637%" y="159.50"></text></g><g><title>ZSTD_CCtxParams_setParameter (1 samples, 0.16%)</title><rect x="29.0735%" y="213" width="0.1597%" height="15" fill="rgb(210,16,53)" fg:x="182" fg:w="1"/><text x="29.3235%" y="223.50"></text></g><g><title>ZSTD_CCtx_loadDictionary (1 samples, 0.16%)</title><rect x="29.2332%" y="213" width="0.1597%" height="15" fill="rgb(235,124,12)" fg:x="183" fg:w="1"/><text x="29.4832%" y="223.50"></text></g><g><title>ZSTD_CCtx_reset (1 samples, 0.16%)</title><rect x="29.3930%" y="213" width="0.1597%" height="15" fill="rgb(224,169,11)" fg:x="184" fg:w="1"/><text x="29.6430%" y="223.50"></text></g><g><title>ZSTD_CCtx_reset (1 samples, 0.16%)</title><rect x="29.3930%" y="197" width="0.1597%" height="15" fill="rgb(250,166,2)" fg:x="184" fg:w="1"/><text x="29.6430%" y="207.50"></text></g><g><title>ZSTD_clearAllDicts (1 samples, 0.16%)</title><rect x="29.3930%" y="181" width="0.1597%" height="15" fill="rgb(242,216,29)" fg:x="184" fg:w="1"/><text x="29.6430%" y="191.50"></text></g><g><title>ZSTD_cParam_getBounds (3 samples, 0.48%)</title><rect x="29.5527%" y="213" width="0.4792%" height="15" fill="rgb(230,116,27)" fg:x="185" fg:w="3"/><text x="29.8027%" y="223.50"></text></g><g><title>ZSTD_compressBlock_doubleFast (6 samples, 0.96%)</title><rect x="30.0319%" y="213" width="0.9585%" height="15" fill="rgb(228,99,48)" fg:x="188" fg:w="6"/><text x="30.2819%" y="223.50"></text></g><g><title>ZSTD_compressBlock_doubleFast_noDict_5 (6 samples, 0.96%)</title><rect x="30.0319%" y="197" width="0.9585%" height="15" fill="rgb(253,11,6)" fg:x="188" fg:w="6"/><text x="30.2819%" y="207.50"></text></g><g><title>ZSTD_compressBlock_doubleFast_noDict_generic (6 samples, 0.96%)</title><rect x="30.0319%" y="181" width="0.9585%" height="15" fill="rgb(247,143,39)" fg:x="188" fg:w="6"/><text x="30.2819%" y="191.50"></text></g><g><title>ZSTD_compressLiterals (1 samples, 0.16%)</title><rect x="30.9904%" y="213" width="0.1597%" height="15" fill="rgb(236,97,10)" fg:x="194" fg:w="1"/><text x="31.2404%" y="223.50"></text></g><g><title>ZSTD_encodeSequences_bmi2 (1 samples, 0.16%)</title><rect x="31.1502%" y="213" width="0.1597%" height="15" fill="rgb(233,208,19)" fg:x="195" fg:w="1"/><text x="31.4002%" y="223.50"></text></g><g><title>ZSTD_encodeSequences_body (1 samples, 0.16%)</title><rect x="31.1502%" y="197" width="0.1597%" height="15" fill="rgb(216,164,2)" fg:x="195" fg:w="1"/><text x="31.4002%" y="207.50"></text></g><g><title>FSE_initCState2 (1 samples, 0.16%)</title><rect x="31.1502%" y="181" width="0.1597%" height="15" fill="rgb(220,129,5)" fg:x="195" fg:w="1"/><text x="31.4002%" y="191.50"></text></g><g><title>FSE_initCState (1 samples, 0.16%)</title><rect x="31.1502%" y="165" width="0.1597%" height="15" fill="rgb(242,17,10)" fg:x="195" fg:w="1"/><text x="31.4002%" y="175.50"></text></g><g><title>ZSTD_getCParamsFromCCtxParams (1 samples, 0.16%)</title><rect x="31.3099%" y="213" width="0.1597%" height="15" fill="rgb(242,107,0)" fg:x="196" fg:w="1"/><text x="31.5599%" y="223.50"></text></g><g><title>ZSTD_adjustCParams_internal (1 samples, 0.16%)</title><rect x="31.3099%" y="197" width="0.1597%" height="15" fill="rgb(251,28,31)" fg:x="196" fg:w="1"/><text x="31.5599%" y="207.50"></text></g><g><title>ZSTD_adjustCParams_internal (1 samples, 0.16%)</title><rect x="31.4696%" y="197" width="0.1597%" height="15" fill="rgb(233,223,10)" fg:x="197" fg:w="1"/><text x="31.7196%" y="207.50"></text></g><g><title>ZSTD_getCParams_internal (2 samples, 0.32%)</title><rect x="31.4696%" y="213" width="0.3195%" height="15" fill="rgb(215,21,27)" fg:x="197" fg:w="2"/><text x="31.7196%" y="223.50"></text></g><g><title>ZSTD_getCParamRowSize (1 samples, 0.16%)</title><rect x="31.6294%" y="197" width="0.1597%" height="15" fill="rgb(232,23,21)" fg:x="198" fg:w="1"/><text x="31.8794%" y="207.50"></text></g><g><title>ZSTD_cwksp_reserve_aligned (2 samples, 0.32%)</title><rect x="31.9489%" y="197" width="0.3195%" height="15" fill="rgb(244,5,23)" fg:x="200" fg:w="2"/><text x="32.1989%" y="207.50"></text></g><g><title>ZSTD_cwksp_reserve_internal (2 samples, 0.32%)</title><rect x="31.9489%" y="181" width="0.3195%" height="15" fill="rgb(226,81,46)" fg:x="200" fg:w="2"/><text x="32.1989%" y="191.50"></text></g><g><title>ZSTD_cwksp_internal_advance_phase (2 samples, 0.32%)</title><rect x="31.9489%" y="165" width="0.3195%" height="15" fill="rgb(247,70,30)" fg:x="200" fg:w="2"/><text x="32.1989%" y="175.50"></text></g><g><title>ZSTD_resetCCtx_internal (4 samples, 0.64%)</title><rect x="31.7891%" y="213" width="0.6390%" height="15" fill="rgb(212,68,19)" fg:x="199" fg:w="4"/><text x="32.0391%" y="223.50"></text></g><g><title>ZSTD_estimateCCtxSize_usingCCtxParams_internal (1 samples, 0.16%)</title><rect x="32.2684%" y="197" width="0.1597%" height="15" fill="rgb(240,187,13)" fg:x="202" fg:w="1"/><text x="32.5184%" y="207.50"></text></g><g><title>ZSTD_reset_matchState (1 samples, 0.16%)</title><rect x="32.4281%" y="213" width="0.1597%" height="15" fill="rgb(223,113,26)" fg:x="203" fg:w="1"/><text x="32.6781%" y="223.50"></text></g><g><title>ZSTD_selectBlockCompressor (1 samples, 0.16%)</title><rect x="32.5879%" y="213" width="0.1597%" height="15" fill="rgb(206,192,2)" fg:x="204" fg:w="1"/><text x="32.8379%" y="223.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.32%)</title><rect x="32.7476%" y="213" width="0.3195%" height="15" fill="rgb(241,108,4)" fg:x="205" fg:w="2"/><text x="32.9976%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.16%)</title><rect x="33.0671%" y="213" width="0.1597%" height="15" fill="rgb(247,173,49)" fg:x="207" fg:w="1"/><text x="33.3171%" y="223.50"></text></g><g><title>__memset_avx2_erms (109 samples, 17.41%)</title><rect x="33.2268%" y="213" width="17.4121%" height="15" fill="rgb(224,114,35)" fg:x="208" fg:w="109"/><text x="33.4768%" y="223.50">__memset_avx2_erms</text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.16%)</title><rect x="50.6390%" y="213" width="0.1597%" height="15" fill="rgb(245,159,27)" fg:x="317" fg:w="1"/><text x="50.8890%" y="223.50"></text></g><g><title>_int_free (3 samples, 0.48%)</title><rect x="50.7987%" y="213" width="0.4792%" height="15" fill="rgb(245,172,44)" fg:x="318" fg:w="3"/><text x="51.0487%" y="223.50"></text></g><g><title>_int_malloc (2 samples, 0.32%)</title><rect x="51.2780%" y="213" width="0.3195%" height="15" fill="rgb(236,23,11)" fg:x="321" fg:w="2"/><text x="51.5280%" y="223.50"></text></g><g><title>_int_realloc (1 samples, 0.16%)</title><rect x="51.5974%" y="213" width="0.1597%" height="15" fill="rgb(205,117,38)" fg:x="323" fg:w="1"/><text x="51.8474%" y="223.50"></text></g><g><title>bincode::config::int::VarintEncoding::varint_size (1 samples, 0.16%)</title><rect x="51.7572%" y="213" width="0.1597%" height="15" fill="rgb(237,72,25)" fg:x="324" fg:w="1"/><text x="52.0072%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::rfind (2 samples, 0.32%)</title><rect x="51.9169%" y="213" width="0.3195%" height="15" fill="rgb(244,70,9)" fg:x="325" fg:w="2"/><text x="52.1669%" y="223.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.16%)</title><rect x="52.2364%" y="213" width="0.1597%" height="15" fill="rgb(217,125,39)" fg:x="327" fg:w="1"/><text x="52.4864%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.32%)</title><rect x="52.3962%" y="197" width="0.3195%" height="15" fill="rgb(235,36,10)" fg:x="328" fg:w="2"/><text x="52.6462%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.32%)</title><rect x="52.3962%" y="181" width="0.3195%" height="15" fill="rgb(251,123,47)" fg:x="328" fg:w="2"/><text x="52.6462%" y="191.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (11 samples, 1.76%)</title><rect x="52.3962%" y="213" width="1.7572%" height="15" fill="rgb(221,13,13)" fg:x="328" fg:w="11"/><text x="52.6462%" y="223.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (9 samples, 1.44%)</title><rect x="52.7157%" y="197" width="1.4377%" height="15" fill="rgb(238,131,9)" fg:x="330" fg:w="9"/><text x="52.9657%" y="207.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (9 samples, 1.44%)</title><rect x="52.7157%" y="181" width="1.4377%" height="15" fill="rgb(211,50,8)" fg:x="330" fg:w="9"/><text x="52.9657%" y="191.50"></text></g><g><title>core::hint::spin_loop (9 samples, 1.44%)</title><rect x="52.7157%" y="165" width="1.4377%" height="15" fill="rgb(245,182,24)" fg:x="330" fg:w="9"/><text x="52.9657%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (9 samples, 1.44%)</title><rect x="52.7157%" y="149" width="1.4377%" height="15" fill="rgb(242,14,37)" fg:x="330" fg:w="9"/><text x="52.9657%" y="159.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (1 samples, 0.16%)</title><rect x="54.3131%" y="197" width="0.1597%" height="15" fill="rgb(246,228,12)" fg:x="340" fg:w="1"/><text x="54.5631%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::list::Slot&lt;T&gt;::wait_write (1 samples, 0.16%)</title><rect x="54.3131%" y="181" width="0.1597%" height="15" fill="rgb(213,55,15)" fg:x="340" fg:w="1"/><text x="54.5631%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.16%)</title><rect x="54.3131%" y="165" width="0.1597%" height="15" fill="rgb(209,9,3)" fg:x="340" fg:w="1"/><text x="54.5631%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.16%)</title><rect x="54.3131%" y="149" width="0.1597%" height="15" fill="rgb(230,59,30)" fg:x="340" fg:w="1"/><text x="54.5631%" y="159.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (12 samples, 1.92%)</title><rect x="54.1534%" y="213" width="1.9169%" height="15" fill="rgb(209,121,21)" fg:x="339" fg:w="12"/><text x="54.4034%" y="223.50">c..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (10 samples, 1.60%)</title><rect x="54.4728%" y="197" width="1.5974%" height="15" fill="rgb(220,109,13)" fg:x="341" fg:w="10"/><text x="54.7228%" y="207.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (10 samples, 1.60%)</title><rect x="54.4728%" y="181" width="1.5974%" height="15" fill="rgb(232,18,1)" fg:x="341" fg:w="10"/><text x="54.7228%" y="191.50"></text></g><g><title>core::hint::spin_loop (10 samples, 1.60%)</title><rect x="54.4728%" y="165" width="1.5974%" height="15" fill="rgb(215,41,42)" fg:x="341" fg:w="10"/><text x="54.7228%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (10 samples, 1.60%)</title><rect x="54.4728%" y="149" width="1.5974%" height="15" fill="rgb(224,123,36)" fg:x="341" fg:w="10"/><text x="54.7228%" y="159.50"></text></g><g><title>puffin::now_ns (2 samples, 0.32%)</title><rect x="56.0703%" y="213" width="0.3195%" height="15" fill="rgb(240,125,3)" fg:x="351" fg:w="2"/><text x="56.3203%" y="223.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.16%)</title><rect x="56.2300%" y="197" width="0.1597%" height="15" fill="rgb(205,98,50)" fg:x="352" fg:w="1"/><text x="56.4800%" y="207.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.16%)</title><rect x="56.2300%" y="181" width="0.1597%" height="15" fill="rgb(205,185,37)" fg:x="352" fg:w="1"/><text x="56.4800%" y="191.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.16%)</title><rect x="56.2300%" y="165" width="0.1597%" height="15" fill="rgb(238,207,15)" fg:x="352" fg:w="1"/><text x="56.4800%" y="175.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.16%)</title><rect x="56.2300%" y="149" width="0.1597%" height="15" fill="rgb(213,199,42)" fg:x="352" fg:w="1"/><text x="56.4800%" y="159.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get (1 samples, 0.16%)</title><rect x="56.2300%" y="133" width="0.1597%" height="15" fill="rgb(235,201,11)" fg:x="352" fg:w="1"/><text x="56.4800%" y="143.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::is_initialized (1 samples, 0.16%)</title><rect x="56.2300%" y="117" width="0.1597%" height="15" fill="rgb(207,46,11)" fg:x="352" fg:w="1"/><text x="56.4800%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.16%)</title><rect x="56.2300%" y="101" width="0.1597%" height="15" fill="rgb(241,35,35)" fg:x="352" fg:w="1"/><text x="56.4800%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.16%)</title><rect x="56.2300%" y="85" width="0.1597%" height="15" fill="rgb(243,32,47)" fg:x="352" fg:w="1"/><text x="56.4800%" y="95.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.16%)</title><rect x="56.3898%" y="213" width="0.1597%" height="15" fill="rgb(247,202,23)" fg:x="353" fg:w="1"/><text x="56.6398%" y="223.50"></text></g><g><title>&lt;zstd::stream::write::Encoder&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.16%)</title><rect x="56.3898%" y="197" width="0.1597%" height="15" fill="rgb(219,102,11)" fg:x="353" fg:w="1"/><text x="56.6398%" y="207.50"></text></g><g><title>std::thread::park (2 samples, 0.32%)</title><rect x="56.5495%" y="213" width="0.3195%" height="15" fill="rgb(243,110,44)" fg:x="354" fg:w="2"/><text x="56.7995%" y="223.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (2 samples, 0.32%)</title><rect x="56.5495%" y="197" width="0.3195%" height="15" fill="rgb(222,74,54)" fg:x="354" fg:w="2"/><text x="56.7995%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicI32::compare_exchange (2 samples, 0.32%)</title><rect x="56.5495%" y="181" width="0.3195%" height="15" fill="rgb(216,99,12)" fg:x="354" fg:w="2"/><text x="56.7995%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.32%)</title><rect x="56.5495%" y="165" width="0.3195%" height="15" fill="rgb(226,22,26)" fg:x="354" fg:w="2"/><text x="56.7995%" y="175.50"></text></g><g><title>syscall (17 samples, 2.72%)</title><rect x="56.8690%" y="213" width="2.7157%" height="15" fill="rgb(217,163,10)" fg:x="356" fg:w="17"/><text x="57.1190%" y="223.50">sy..</text></g><g><title>zstd::stream::raw::Encoder::with_dictionary (1 samples, 0.16%)</title><rect x="59.5847%" y="213" width="0.1597%" height="15" fill="rgb(213,25,53)" fg:x="373" fg:w="1"/><text x="59.8347%" y="223.50"></text></g><g><title>zstd::stream::zio::writer::Writer&lt;W,D&gt;::finish (1 samples, 0.16%)</title><rect x="59.7444%" y="213" width="0.1597%" height="15" fill="rgb(252,105,26)" fg:x="374" fg:w="1"/><text x="59.9944%" y="223.50"></text></g><g><title>zstd::stream::zio::writer::Writer&lt;W,D&gt;::write_from_offset (1 samples, 0.16%)</title><rect x="59.7444%" y="197" width="0.1597%" height="15" fill="rgb(220,39,43)" fg:x="374" fg:w="1"/><text x="59.9944%" y="207.50"></text></g><g><title>zstd_safe::CCtx::set_parameter (1 samples, 0.16%)</title><rect x="59.9042%" y="213" width="0.1597%" height="15" fill="rgb(229,68,48)" fg:x="375" fg:w="1"/><text x="60.1542%" y="223.50"></text></g><g><title>puffin-server (224 samples, 35.78%)</title><rect x="24.4409%" y="229" width="35.7827%" height="15" fill="rgb(252,8,32)" fg:x="153" fg:w="224"/><text x="24.6909%" y="239.50">puffin-server</text></g><g><title>zstd_safe::parse_code (1 samples, 0.16%)</title><rect x="60.0639%" y="213" width="0.1597%" height="15" fill="rgb(223,20,43)" fg:x="376" fg:w="1"/><text x="60.3139%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.16%)</title><rect x="60.2236%" y="213" width="0.1597%" height="15" fill="rgb(229,81,49)" fg:x="377" fg:w="1"/><text x="60.4736%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.16%)</title><rect x="60.2236%" y="197" width="0.1597%" height="15" fill="rgb(236,28,36)" fg:x="377" fg:w="1"/><text x="60.4736%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.16%)</title><rect x="60.2236%" y="181" width="0.1597%" height="15" fill="rgb(249,185,26)" fg:x="377" fg:w="1"/><text x="60.4736%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.16%)</title><rect x="60.2236%" y="165" width="0.1597%" height="15" fill="rgb(249,174,33)" fg:x="377" fg:w="1"/><text x="60.4736%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.16%)</title><rect x="60.2236%" y="149" width="0.1597%" height="15" fill="rgb(233,201,37)" fg:x="377" fg:w="1"/><text x="60.4736%" y="159.50"></text></g><g><title>&lt;ash::vk::definitions::PipelineExecutableStatisticValueKHR as core::default::Default&gt;::default (1 samples, 0.16%)</title><rect x="60.3834%" y="213" width="0.1597%" height="15" fill="rgb(221,78,26)" fg:x="378" fg:w="1"/><text x="60.6334%" y="223.50"></text></g><g><title>[[vdso]] (2 samples, 0.32%)</title><rect x="60.5431%" y="213" width="0.3195%" height="15" fill="rgb(250,127,30)" fg:x="379" fg:w="2"/><text x="60.7931%" y="223.50"></text></g><g><title>[libGLX_nvidia.so.495.46] (3 samples, 0.48%)</title><rect x="60.8626%" y="213" width="0.4792%" height="15" fill="rgb(230,49,44)" fg:x="381" fg:w="3"/><text x="61.1126%" y="223.50"></text></g><g><title>[libSPIRV.so] (1 samples, 0.16%)</title><rect x="61.3419%" y="213" width="0.1597%" height="15" fill="rgb(229,67,23)" fg:x="384" fg:w="1"/><text x="61.5919%" y="223.50"></text></g><g><title>[libX11.so.6.4.0] (2 samples, 0.32%)</title><rect x="61.5016%" y="213" width="0.3195%" height="15" fill="rgb(249,83,47)" fg:x="385" fg:w="2"/><text x="61.7516%" y="223.50"></text></g><g><title>[libdbus-1.so.3.19.13] (9 samples, 1.44%)</title><rect x="61.8211%" y="213" width="1.4377%" height="15" fill="rgb(215,43,3)" fg:x="387" fg:w="9"/><text x="62.0711%" y="223.50"></text></g><g><title>[libnvidia-glcore.so.495.46] (83 samples, 13.26%)</title><rect x="63.2588%" y="213" width="13.2588%" height="15" fill="rgb(238,154,13)" fg:x="396" fg:w="83"/><text x="63.5088%" y="223.50">[libnvidia-glcore.so..</text></g><g><title>__GI___clone (5 samples, 0.80%)</title><rect x="76.5176%" y="213" width="0.7987%" height="15" fill="rgb(219,56,2)" fg:x="479" fg:w="5"/><text x="76.7676%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.16%)</title><rect x="77.3163%" y="213" width="0.1597%" height="15" fill="rgb(233,0,4)" fg:x="484" fg:w="1"/><text x="77.5663%" y="223.50"></text></g><g><title>__GI___poll (23 samples, 3.67%)</title><rect x="77.4760%" y="213" width="3.6741%" height="15" fill="rgb(235,30,7)" fg:x="485" fg:w="23"/><text x="77.7260%" y="223.50">__GI..</text></g><g><title>__GI___pthread_mutex_lock (2 samples, 0.32%)</title><rect x="81.1502%" y="213" width="0.3195%" height="15" fill="rgb(250,79,13)" fg:x="508" fg:w="2"/><text x="81.4002%" y="223.50"></text></g><g><title>__GI___pthread_rwlock_unlock (1 samples, 0.16%)</title><rect x="81.4696%" y="213" width="0.1597%" height="15" fill="rgb(211,146,34)" fg:x="510" fg:w="1"/><text x="81.7196%" y="223.50"></text></g><g><title>__GI___sched_yield (3 samples, 0.48%)</title><rect x="81.6294%" y="213" width="0.4792%" height="15" fill="rgb(228,22,38)" fg:x="511" fg:w="3"/><text x="81.8794%" y="223.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.16%)</title><rect x="82.1086%" y="213" width="0.1597%" height="15" fill="rgb(235,168,5)" fg:x="514" fg:w="1"/><text x="82.3586%" y="223.50"></text></g><g><title>__ioctl (1 samples, 0.16%)</title><rect x="82.2684%" y="213" width="0.1597%" height="15" fill="rgb(221,155,16)" fg:x="515" fg:w="1"/><text x="82.5184%" y="223.50"></text></g><g><title>__libc_disable_asynccancel (1 samples, 0.16%)</title><rect x="82.4281%" y="213" width="0.1597%" height="15" fill="rgb(215,215,53)" fg:x="516" fg:w="1"/><text x="82.6781%" y="223.50"></text></g><g><title>__memchr_avx2 (2 samples, 0.32%)</title><rect x="82.5879%" y="213" width="0.3195%" height="15" fill="rgb(223,4,10)" fg:x="517" fg:w="2"/><text x="82.8379%" y="223.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.80%)</title><rect x="82.9073%" y="213" width="0.7987%" height="15" fill="rgb(234,103,6)" fg:x="519" fg:w="5"/><text x="83.1573%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.64%)</title><rect x="83.7061%" y="213" width="0.6390%" height="15" fill="rgb(227,97,0)" fg:x="524" fg:w="4"/><text x="83.9561%" y="223.50"></text></g><g><title>__mmap (1 samples, 0.16%)</title><rect x="84.3450%" y="213" width="0.1597%" height="15" fill="rgb(234,150,53)" fg:x="528" fg:w="1"/><text x="84.5950%" y="223.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (2 samples, 0.32%)</title><rect x="84.5048%" y="213" width="0.3195%" height="15" fill="rgb(228,201,54)" fg:x="529" fg:w="2"/><text x="84.7548%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.16%)</title><rect x="84.8243%" y="213" width="0.1597%" height="15" fill="rgb(222,22,37)" fg:x="531" fg:w="1"/><text x="85.0743%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.16%)</title><rect x="84.8243%" y="197" width="0.1597%" height="15" fill="rgb(237,53,32)" fg:x="531" fg:w="1"/><text x="85.0743%" y="207.50"></text></g><g><title>__strcmp_avx2 (2 samples, 0.32%)</title><rect x="84.9840%" y="213" width="0.3195%" height="15" fill="rgb(233,25,53)" fg:x="532" fg:w="2"/><text x="85.2340%" y="223.50"></text></g><g><title>__strcspn_sse42 (1 samples, 0.16%)</title><rect x="85.3035%" y="213" width="0.1597%" height="15" fill="rgb(210,40,34)" fg:x="534" fg:w="1"/><text x="85.5535%" y="223.50"></text></g><g><title>__strlen_avx2 (3 samples, 0.48%)</title><rect x="85.4633%" y="213" width="0.4792%" height="15" fill="rgb(241,220,44)" fg:x="535" fg:w="3"/><text x="85.7133%" y="223.50"></text></g><g><title>__strncmp_avx2 (1 samples, 0.16%)</title><rect x="85.9425%" y="213" width="0.1597%" height="15" fill="rgb(235,28,35)" fg:x="538" fg:w="1"/><text x="86.1925%" y="223.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.16%)</title><rect x="86.1022%" y="213" width="0.1597%" height="15" fill="rgb(210,56,17)" fg:x="539" fg:w="1"/><text x="86.3522%" y="223.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.16%)</title><rect x="86.2620%" y="213" width="0.1597%" height="15" fill="rgb(224,130,29)" fg:x="540" fg:w="1"/><text x="86.5120%" y="223.50"></text></g><g><title>__vsnprintf_internal (1 samples, 0.16%)</title><rect x="86.4217%" y="213" width="0.1597%" height="15" fill="rgb(235,212,8)" fg:x="541" fg:w="1"/><text x="86.6717%" y="223.50"></text></g><g><title>_dbus_type_writer_unrecurse (1 samples, 0.16%)</title><rect x="86.5815%" y="213" width="0.1597%" height="15" fill="rgb(223,33,50)" fg:x="542" fg:w="1"/><text x="86.8315%" y="223.50"></text></g><g><title>_dl_important_hwcaps (1 samples, 0.16%)</title><rect x="86.7412%" y="213" width="0.1597%" height="15" fill="rgb(219,149,13)" fg:x="543" fg:w="1"/><text x="86.9912%" y="223.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.16%)</title><rect x="86.9010%" y="213" width="0.1597%" height="15" fill="rgb(250,156,29)" fg:x="544" fg:w="1"/><text x="87.1510%" y="223.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.16%)</title><rect x="87.0607%" y="213" width="0.1597%" height="15" fill="rgb(216,193,19)" fg:x="545" fg:w="1"/><text x="87.3107%" y="223.50"></text></g><g><title>_int_free (1 samples, 0.16%)</title><rect x="87.2204%" y="213" width="0.1597%" height="15" fill="rgb(216,135,14)" fg:x="546" fg:w="1"/><text x="87.4704%" y="223.50"></text></g><g><title>_int_malloc (3 samples, 0.48%)</title><rect x="87.3802%" y="213" width="0.4792%" height="15" fill="rgb(241,47,5)" fg:x="547" fg:w="3"/><text x="87.6302%" y="223.50"></text></g><g><title>_int_realloc (1 samples, 0.16%)</title><rect x="87.8594%" y="213" width="0.1597%" height="15" fill="rgb(233,42,35)" fg:x="550" fg:w="1"/><text x="88.1094%" y="223.50"></text></g><g><title>_start (5 samples, 0.80%)</title><rect x="88.0192%" y="213" width="0.7987%" height="15" fill="rgb(231,13,6)" fg:x="551" fg:w="5"/><text x="88.2692%" y="223.50"></text></g><g><title>alloc::slice::insert_head (1 samples, 0.16%)</title><rect x="88.8179%" y="213" width="0.1597%" height="15" fill="rgb(207,181,40)" fg:x="556" fg:w="1"/><text x="89.0679%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::rfind (1 samples, 0.16%)</title><rect x="88.9776%" y="213" width="0.1597%" height="15" fill="rgb(254,173,49)" fg:x="557" fg:w="1"/><text x="89.2276%" y="223.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.16%)</title><rect x="89.1374%" y="213" width="0.1597%" height="15" fill="rgb(221,1,38)" fg:x="558" fg:w="1"/><text x="89.3874%" y="223.50"></text></g><g><title>dbus_type_is_basic (1 samples, 0.16%)</title><rect x="89.2971%" y="213" width="0.1597%" height="15" fill="rgb(206,124,46)" fg:x="559" fg:w="1"/><text x="89.5471%" y="223.50"></text></g><g><title>glslang::TFunction::TFunction (3 samples, 0.48%)</title><rect x="89.4569%" y="213" width="0.4792%" height="15" fill="rgb(249,21,11)" fg:x="560" fg:w="3"/><text x="89.7069%" y="223.50"></text></g><g><title>glslang::TFunction::addParameter (1 samples, 0.16%)</title><rect x="89.9361%" y="213" width="0.1597%" height="15" fill="rgb(222,201,40)" fg:x="563" fg:w="1"/><text x="90.1861%" y="223.50"></text></g><g><title>glslang::TFunction::~TFunction (1 samples, 0.16%)</title><rect x="90.0958%" y="213" width="0.1597%" height="15" fill="rgb(235,61,29)" fg:x="564" fg:w="1"/><text x="90.3458%" y="223.50"></text></g><g><title>glslang::TParseContext::getDefaultPrecision (1 samples, 0.16%)</title><rect x="90.2556%" y="213" width="0.1597%" height="15" fill="rgb(219,207,3)" fg:x="565" fg:w="1"/><text x="90.5056%" y="223.50"></text></g><g><title>glslang::TParseContext::mergeQualifiers (1 samples, 0.16%)</title><rect x="90.4153%" y="213" width="0.1597%" height="15" fill="rgb(222,56,46)" fg:x="566" fg:w="1"/><text x="90.6653%" y="223.50"></text></g><g><title>glslang::TPpContext::tStringInput::scan (4 samples, 0.64%)</title><rect x="90.5751%" y="213" width="0.6390%" height="15" fill="rgb(239,76,54)" fg:x="567" fg:w="4"/><text x="90.8251%" y="223.50"></text></g><g><title>glslang::TPpContext::tokenPaste (1 samples, 0.16%)</title><rect x="91.2141%" y="213" width="0.1597%" height="15" fill="rgb(231,124,27)" fg:x="571" fg:w="1"/><text x="91.4641%" y="223.50"></text></g><g><title>glslang::TPpContext::tokenize (3 samples, 0.48%)</title><rect x="91.3738%" y="213" width="0.4792%" height="15" fill="rgb(249,195,6)" fg:x="572" fg:w="3"/><text x="91.6238%" y="223.50"></text></g><g><title>glslang::TScanContext::tokenize (2 samples, 0.32%)</title><rect x="91.8530%" y="213" width="0.3195%" height="15" fill="rgb(237,174,47)" fg:x="575" fg:w="2"/><text x="92.1030%" y="223.50"></text></g><g><title>glslang::TShaderQualifiers::merge (2 samples, 0.32%)</title><rect x="92.1725%" y="213" width="0.3195%" height="15" fill="rgb(206,201,31)" fg:x="577" fg:w="2"/><text x="92.4225%" y="223.50"></text></g><g><title>glslang::TSymbolTableLevel::relateToOperator (4 samples, 0.64%)</title><rect x="92.4920%" y="213" width="0.6390%" height="15" fill="rgb(231,57,52)" fg:x="579" fg:w="4"/><text x="92.7420%" y="223.50"></text></g><g><title>glslang::TSymbolTableLevel::~TSymbolTableLevel (1 samples, 0.16%)</title><rect x="93.1310%" y="213" width="0.1597%" height="15" fill="rgb(248,177,22)" fg:x="583" fg:w="1"/><text x="93.3810%" y="223.50"></text></g><g><title>glslang::TType::buildMangledName (1 samples, 0.16%)</title><rect x="93.2907%" y="213" width="0.1597%" height="15" fill="rgb(215,211,37)" fg:x="584" fg:w="1"/><text x="93.5407%" y="223.50"></text></g><g><title>glslang::TType::deepCopy (3 samples, 0.48%)</title><rect x="93.4505%" y="213" width="0.4792%" height="15" fill="rgb(241,128,51)" fg:x="585" fg:w="3"/><text x="93.7005%" y="223.50"></text></g><g><title>graphy::descriptor::DescriptorSetState::reset (1 samples, 0.16%)</title><rect x="93.9297%" y="213" width="0.1597%" height="15" fill="rgb(227,165,31)" fg:x="588" fg:w="1"/><text x="94.1797%" y="223.50"></text></g><g><title>&lt;graphy::descriptor::BindingState as core::default::Default&gt;::default (1 samples, 0.16%)</title><rect x="93.9297%" y="197" width="0.1597%" height="15" fill="rgb(228,167,24)" fg:x="588" fg:w="1"/><text x="94.1797%" y="207.50"></text></g><g><title>&lt;graphy::descriptor::BufferState as core::default::Default&gt;::default (1 samples, 0.16%)</title><rect x="93.9297%" y="181" width="0.1597%" height="15" fill="rgb(228,143,12)" fg:x="588" fg:w="1"/><text x="94.1797%" y="191.50"></text></g><g><title>graphy::graph::command::render::PipelineLookup::new_frame (1 samples, 0.16%)</title><rect x="94.0895%" y="213" width="0.1597%" height="15" fill="rgb(249,149,8)" fg:x="589" fg:w="1"/><text x="94.3395%" y="223.50"></text></g><g><title>graphy::graph::runtime::GraphExecutor::execute_renderpass (1 samples, 0.16%)</title><rect x="94.2492%" y="197" width="0.1597%" height="15" fill="rgb(243,35,44)" fg:x="590" fg:w="1"/><text x="94.4992%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;graphy::graph::command::render::RenderpassCommands&gt; (1 samples, 0.16%)</title><rect x="94.2492%" y="181" width="0.1597%" height="15" fill="rgb(246,89,9)" fg:x="590" fg:w="1"/><text x="94.4992%" y="191.50"></text></g><g><title>graphy::graph::runtime::GraphExecutor::execute (2 samples, 0.32%)</title><rect x="94.2492%" y="213" width="0.3195%" height="15" fill="rgb(233,213,13)" fg:x="590" fg:w="2"/><text x="94.4992%" y="223.50"></text></g><g><title>puffin::short_file_name (1 samples, 0.16%)</title><rect x="94.4089%" y="197" width="0.1597%" height="15" fill="rgb(233,141,41)" fg:x="591" fg:w="1"/><text x="94.6589%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::rfind (1 samples, 0.16%)</title><rect x="94.4089%" y="181" width="0.1597%" height="15" fill="rgb(239,167,4)" fg:x="591" fg:w="1"/><text x="94.6589%" y="191.50"></text></g><g><title>&lt;core::str::pattern::CharSliceSearcher as core::str::pattern::ReverseSearcher&gt;::next_match_back (1 samples, 0.16%)</title><rect x="94.4089%" y="165" width="0.1597%" height="15" fill="rgb(209,217,16)" fg:x="591" fg:w="1"/><text x="94.6589%" y="175.50"></text></g><g><title>core::str::pattern::ReverseSearcher::next_match_back (1 samples, 0.16%)</title><rect x="94.4089%" y="149" width="0.1597%" height="15" fill="rgb(219,88,35)" fg:x="591" fg:w="1"/><text x="94.6589%" y="159.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::ReverseSearcher&gt;::next_back (1 samples, 0.16%)</title><rect x="94.4089%" y="133" width="0.1597%" height="15" fill="rgb(220,193,23)" fg:x="591" fg:w="1"/><text x="94.6589%" y="143.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.16%)</title><rect x="94.4089%" y="117" width="0.1597%" height="15" fill="rgb(230,90,52)" fg:x="591" fg:w="1"/><text x="94.6589%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.16%)</title><rect x="94.4089%" y="101" width="0.1597%" height="15" fill="rgb(252,106,19)" fg:x="591" fg:w="1"/><text x="94.6589%" y="111.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (1 samples, 0.16%)</title><rect x="94.4089%" y="85" width="0.1597%" height="15" fill="rgb(206,74,20)" fg:x="591" fg:w="1"/><text x="94.6589%" y="95.50"></text></g><g><title>graphy::graph::runtime::GraphExecutor::finish (1 samples, 0.16%)</title><rect x="94.5687%" y="213" width="0.1597%" height="15" fill="rgb(230,138,44)" fg:x="592" fg:w="1"/><text x="94.8187%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;puffin::ProfilerScope&gt;&gt; (1 samples, 0.16%)</title><rect x="94.5687%" y="197" width="0.1597%" height="15" fill="rgb(235,182,43)" fg:x="592" fg:w="1"/><text x="94.8187%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;puffin::ProfilerScope&gt; (1 samples, 0.16%)</title><rect x="94.5687%" y="181" width="0.1597%" height="15" fill="rgb(242,16,51)" fg:x="592" fg:w="1"/><text x="94.8187%" y="191.50"></text></g><g><title>&lt;puffin::ProfilerScope as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="94.5687%" y="165" width="0.1597%" height="15" fill="rgb(248,9,4)" fg:x="592" fg:w="1"/><text x="94.8187%" y="175.50"></text></g><g><title>puffin::ThreadProfiler::call (1 samples, 0.16%)</title><rect x="94.5687%" y="149" width="0.1597%" height="15" fill="rgb(210,31,22)" fg:x="592" fg:w="1"/><text x="94.8187%" y="159.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.16%)</title><rect x="94.5687%" y="133" width="0.1597%" height="15" fill="rgb(239,54,39)" fg:x="592" fg:w="1"/><text x="94.8187%" y="143.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.16%)</title><rect x="94.5687%" y="117" width="0.1597%" height="15" fill="rgb(230,99,41)" fg:x="592" fg:w="1"/><text x="94.8187%" y="127.50"></text></g><g><title>puffin::ThreadProfiler::call::{{closure}} (1 samples, 0.16%)</title><rect x="94.5687%" y="101" width="0.1597%" height="15" fill="rgb(253,106,12)" fg:x="592" fg:w="1"/><text x="94.8187%" y="111.50"></text></g><g><title>&lt;puffin::ProfilerScope as core::ops::drop::Drop&gt;::drop::{{closure}} (1 samples, 0.16%)</title><rect x="94.5687%" y="85" width="0.1597%" height="15" fill="rgb(213,46,41)" fg:x="592" fg:w="1"/><text x="94.8187%" y="95.50"></text></g><g><title>graphy::graph::runtime::GraphExecutor::submit_and_present (1 samples, 0.16%)</title><rect x="94.7284%" y="213" width="0.1597%" height="15" fill="rgb(215,133,35)" fg:x="593" fg:w="1"/><text x="94.9784%" y="223.50"></text></g><g><title>graphy::swapchain::Swapchain::present (1 samples, 0.16%)</title><rect x="94.7284%" y="197" width="0.1597%" height="15" fill="rgb(213,28,5)" fg:x="593" fg:w="1"/><text x="94.9784%" y="207.50"></text></g><g><title>graphy::util::cache_map::CacheMap&lt;K,V&gt;::get (1 samples, 0.16%)</title><rect x="94.8882%" y="213" width="0.1597%" height="15" fill="rgb(215,77,49)" fg:x="594" fg:w="1"/><text x="95.1382%" y="223.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get (1 samples, 0.16%)</title><rect x="94.8882%" y="197" width="0.1597%" height="15" fill="rgb(248,100,22)" fg:x="594" fg:w="1"/><text x="95.1382%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.16%)</title><rect x="94.8882%" y="181" width="0.1597%" height="15" fill="rgb(208,67,9)" fg:x="594" fg:w="1"/><text x="95.1382%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.16%)</title><rect x="94.8882%" y="165" width="0.1597%" height="15" fill="rgb(219,133,21)" fg:x="594" fg:w="1"/><text x="95.1382%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.16%)</title><rect x="94.8882%" y="149" width="0.1597%" height="15" fill="rgb(246,46,29)" fg:x="594" fg:w="1"/><text x="95.1382%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.16%)</title><rect x="94.8882%" y="133" width="0.1597%" height="15" fill="rgb(246,185,52)" fg:x="594" fg:w="1"/><text x="95.1382%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (1 samples, 0.16%)</title><rect x="94.8882%" y="117" width="0.1597%" height="15" fill="rgb(252,136,11)" fg:x="594" fg:w="1"/><text x="95.1382%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (1 samples, 0.16%)</title><rect x="94.8882%" y="101" width="0.1597%" height="15" fill="rgb(219,138,53)" fg:x="594" fg:w="1"/><text x="95.1382%" y="111.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (1 samples, 0.16%)</title><rect x="94.8882%" y="85" width="0.1597%" height="15" fill="rgb(211,51,23)" fg:x="594" fg:w="1"/><text x="95.1382%" y="95.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.16%)</title><rect x="94.8882%" y="69" width="0.1597%" height="15" fill="rgb(247,221,28)" fg:x="594" fg:w="1"/><text x="95.1382%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.16%)</title><rect x="94.8882%" y="53" width="0.1597%" height="15" fill="rgb(251,222,45)" fg:x="594" fg:w="1"/><text x="95.1382%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.16%)</title><rect x="94.8882%" y="37" width="0.1597%" height="15" fill="rgb(217,162,53)" fg:x="594" fg:w="1"/><text x="95.1382%" y="47.50"></text></g><g><title>puffin::ThreadProfiler::end_scope (1 samples, 0.16%)</title><rect x="95.0479%" y="213" width="0.1597%" height="15" fill="rgb(229,93,14)" fg:x="595" fg:w="1"/><text x="95.2979%" y="223.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.16%)</title><rect x="95.0479%" y="197" width="0.1597%" height="15" fill="rgb(209,67,49)" fg:x="595" fg:w="1"/><text x="95.2979%" y="207.50"></text></g><g><title>puffin::ThreadProfiler::end_scope (1 samples, 0.16%)</title><rect x="95.0479%" y="181" width="0.1597%" height="15" fill="rgb(213,87,29)" fg:x="595" fg:w="1"/><text x="95.2979%" y="191.50"></text></g><g><title>puffin::global_reporter (1 samples, 0.16%)</title><rect x="95.2077%" y="213" width="0.1597%" height="15" fill="rgb(205,151,52)" fg:x="596" fg:w="1"/><text x="95.4577%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,puffin::GlobalProfiler&gt;&gt; (1 samples, 0.16%)</title><rect x="95.2077%" y="197" width="0.1597%" height="15" fill="rgb(253,215,39)" fg:x="596" fg:w="1"/><text x="95.4577%" y="207.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="95.2077%" y="181" width="0.1597%" height="15" fill="rgb(221,220,41)" fg:x="596" fg:w="1"/><text x="95.4577%" y="191.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (1 samples, 0.16%)</title><rect x="95.2077%" y="165" width="0.1597%" height="15" fill="rgb(218,133,21)" fg:x="596" fg:w="1"/><text x="95.4577%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (1 samples, 0.16%)</title><rect x="95.2077%" y="149" width="0.1597%" height="15" fill="rgb(221,193,43)" fg:x="596" fg:w="1"/><text x="95.4577%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.16%)</title><rect x="95.2077%" y="133" width="0.1597%" height="15" fill="rgb(240,128,52)" fg:x="596" fg:w="1"/><text x="95.4577%" y="143.50"></text></g><g><title>simplegraph::main::{{closure}} (1 samples, 0.16%)</title><rect x="95.3674%" y="213" width="0.1597%" height="15" fill="rgb(253,114,12)" fg:x="597" fg:w="1"/><text x="95.6174%" y="223.50"></text></g><g><title>graphy::graph::Graph&lt;S,P,R&gt;::execute (1 samples, 0.16%)</title><rect x="95.3674%" y="197" width="0.1597%" height="15" fill="rgb(215,223,47)" fg:x="597" fg:w="1"/><text x="95.6174%" y="207.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; const, int&gt;, glslang::pool_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.16%)</title><rect x="95.5272%" y="213" width="0.1597%" height="15" fill="rgb(248,225,23)" fg:x="598" fg:w="1"/><text x="95.7772%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; const, glslang::TSymbol*&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; const, glslang::TSymbol*&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; &gt;, glslang::pool_allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, glslang::pool_allocator&lt;char&gt; &gt; const, glslang::TSymbol*&gt; &gt; &gt;::find (1 samples, 0.16%)</title><rect x="95.6869%" y="213" width="0.1597%" height="15" fill="rgb(250,108,0)" fg:x="599" fg:w="1"/><text x="95.9369%" y="223.50"></text></g><g><title>local_Rb_tree_increment (1 samples, 0.16%)</title><rect x="96.6454%" y="197" width="0.1597%" height="15" fill="rgb(228,208,7)" fg:x="605" fg:w="1"/><text x="96.8954%" y="207.50"></text></g><g><title>std::_Rb_tree_increment (7 samples, 1.12%)</title><rect x="95.8466%" y="213" width="1.1182%" height="15" fill="rgb(244,45,10)" fg:x="600" fg:w="7"/><text x="96.0966%" y="223.50"></text></g><g><title>std::_Rb_tree_increment (1 samples, 0.16%)</title><rect x="96.8051%" y="197" width="0.1597%" height="15" fill="rgb(207,125,25)" fg:x="606" fg:w="1"/><text x="97.0551%" y="207.50"></text></g><g><title>all (626 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="626"/><text x="0.2500%" y="255.50"></text></g><g><title>simplegraph (249 samples, 39.78%)</title><rect x="60.2236%" y="229" width="39.7764%" height="15" fill="rgb(249,80,12)" fg:x="377" fg:w="249"/><text x="60.4736%" y="239.50">simplegraph</text></g><g><title>yyparse (19 samples, 3.04%)</title><rect x="96.9649%" y="213" width="3.0351%" height="15" fill="rgb(221,65,9)" fg:x="607" fg:w="19"/><text x="97.2149%" y="223.50">yyp..</text></g></svg></svg>