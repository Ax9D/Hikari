<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="677.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="7869"><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.05%)</title><rect x="0.0000%" y="597" width="0.0508%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="607.50"></text></g><g><title>std::sys::unix::fs::File::write (4 samples, 0.05%)</title><rect x="0.0000%" y="581" width="0.0508%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="591.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 0.05%)</title><rect x="0.0000%" y="565" width="0.0508%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="575.50"></text></g><g><title>[libX11.so.6.4.0] (45 samples, 0.57%)</title><rect x="0.0508%" y="597" width="0.5719%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="45"/><text x="0.3008%" y="607.50"></text></g><g><title>[libxcb.so.1.1.0] (56 samples, 0.71%)</title><rect x="0.6227%" y="597" width="0.7117%" height="15" fill="rgb(208,68,35)" fg:x="49" fg:w="56"/><text x="0.8727%" y="607.50"></text></g><g><title>_XFetchEventCookie (2 samples, 0.03%)</title><rect x="1.3343%" y="597" width="0.0254%" height="15" fill="rgb(232,128,0)" fg:x="105" fg:w="2"/><text x="1.5843%" y="607.50"></text></g><g><title>_XSend (1 samples, 0.01%)</title><rect x="1.3598%" y="597" width="0.0127%" height="15" fill="rgb(207,160,47)" fg:x="107" fg:w="1"/><text x="1.6098%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.43%)</title><rect x="1.3725%" y="597" width="0.4321%" height="15" fill="rgb(228,23,34)" fg:x="108" fg:w="34"/><text x="1.6225%" y="607.50"></text></g><g><title>__errno_location (2 samples, 0.03%)</title><rect x="1.8045%" y="597" width="0.0254%" height="15" fill="rgb(218,30,26)" fg:x="142" fg:w="2"/><text x="2.0545%" y="607.50"></text></g><g><title>__libc_write (27 samples, 0.34%)</title><rect x="1.8300%" y="597" width="0.3431%" height="15" fill="rgb(220,122,19)" fg:x="144" fg:w="27"/><text x="2.0800%" y="607.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="2.1731%" y="597" width="0.0508%" height="15" fill="rgb(250,228,42)" fg:x="171" fg:w="4"/><text x="2.4231%" y="607.50"></text></g><g><title>[[heap]] (176 samples, 2.24%)</title><rect x="0.0000%" y="613" width="2.2366%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="176"/><text x="0.2500%" y="623.50">[..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (1 samples, 0.01%)</title><rect x="2.2239%" y="597" width="0.0127%" height="15" fill="rgb(216,20,37)" fg:x="175" fg:w="1"/><text x="2.4739%" y="607.50"></text></g><g><title>&lt;mio_misc::queue::NotificationQueue as mio_misc::queue::Notifier&gt;::notify (13 samples, 0.17%)</title><rect x="2.2366%" y="597" width="0.1652%" height="15" fill="rgb(206,188,39)" fg:x="176" fg:w="13"/><text x="2.4866%" y="607.50"></text></g><g><title>mio_misc::queue::NotificationQueue::push (4 samples, 0.05%)</title><rect x="2.3510%" y="581" width="0.0508%" height="15" fill="rgb(217,207,13)" fg:x="185" fg:w="4"/><text x="2.6010%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4018%" y="597" width="0.0254%" height="15" fill="rgb(231,73,38)" fg:x="189" fg:w="2"/><text x="2.6518%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4018%" y="581" width="0.0254%" height="15" fill="rgb(225,20,46)" fg:x="189" fg:w="2"/><text x="2.6518%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="2.4018%" y="565" width="0.0254%" height="15" fill="rgb(210,31,41)" fg:x="189" fg:w="2"/><text x="2.6518%" y="575.50"></text></g><g><title>XCheckIfEvent (49 samples, 0.62%)</title><rect x="2.4272%" y="597" width="0.6227%" height="15" fill="rgb(221,200,47)" fg:x="191" fg:w="49"/><text x="2.6772%" y="607.50"></text></g><g><title>XPending (31 samples, 0.39%)</title><rect x="3.0499%" y="597" width="0.3940%" height="15" fill="rgb(226,26,5)" fg:x="240" fg:w="31"/><text x="3.2999%" y="607.50"></text></g><g><title>[libX11.so.6.4.0] (38 samples, 0.48%)</title><rect x="3.4439%" y="597" width="0.4829%" height="15" fill="rgb(249,33,26)" fg:x="271" fg:w="38"/><text x="3.6939%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (2 samples, 0.03%)</title><rect x="3.9014%" y="581" width="0.0254%" height="15" fill="rgb(235,183,28)" fg:x="307" fg:w="2"/><text x="4.1514%" y="591.50"></text></g><g><title>[libxcb.so.1.1.0] (95 samples, 1.21%)</title><rect x="3.9268%" y="597" width="1.2073%" height="15" fill="rgb(221,5,38)" fg:x="309" fg:w="95"/><text x="4.1768%" y="607.50"></text></g><g><title>_XSend (15 samples, 0.19%)</title><rect x="5.1341%" y="597" width="0.1906%" height="15" fill="rgb(247,18,42)" fg:x="404" fg:w="15"/><text x="5.3841%" y="607.50"></text></g><g><title>__GI___libc_free (6 samples, 0.08%)</title><rect x="5.3247%" y="597" width="0.0762%" height="15" fill="rgb(241,131,45)" fg:x="419" fg:w="6"/><text x="5.5747%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.01%)</title><rect x="5.4009%" y="597" width="0.0127%" height="15" fill="rgb(249,31,29)" fg:x="425" fg:w="1"/><text x="5.6509%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (3 samples, 0.04%)</title><rect x="5.4136%" y="597" width="0.0381%" height="15" fill="rgb(225,111,53)" fg:x="426" fg:w="3"/><text x="5.6636%" y="607.50"></text></g><g><title>__clock_gettime_2 (8 samples, 0.10%)</title><rect x="5.4518%" y="597" width="0.1017%" height="15" fill="rgb(238,160,17)" fg:x="429" fg:w="8"/><text x="5.7018%" y="607.50"></text></g><g><title>__errno_location (2 samples, 0.03%)</title><rect x="5.5534%" y="597" width="0.0254%" height="15" fill="rgb(214,148,48)" fg:x="437" fg:w="2"/><text x="5.8034%" y="607.50"></text></g><g><title>_int_free (14 samples, 0.18%)</title><rect x="5.5789%" y="597" width="0.1779%" height="15" fill="rgb(232,36,49)" fg:x="439" fg:w="14"/><text x="5.8289%" y="607.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (10 samples, 0.13%)</title><rect x="5.7568%" y="597" width="0.1271%" height="15" fill="rgb(209,103,24)" fg:x="453" fg:w="10"/><text x="6.0068%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.09%)</title><rect x="5.8838%" y="597" width="0.0890%" height="15" fill="rgb(229,88,8)" fg:x="463" fg:w="7"/><text x="6.1338%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.10%)</title><rect x="5.9728%" y="597" width="0.1017%" height="15" fill="rgb(213,181,19)" fg:x="470" fg:w="8"/><text x="6.2228%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.03%)</title><rect x="6.0491%" y="581" width="0.0254%" height="15" fill="rgb(254,191,54)" fg:x="476" fg:w="2"/><text x="6.2991%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.03%)</title><rect x="6.0872%" y="533" width="0.0254%" height="15" fill="rgb(241,83,37)" fg:x="479" fg:w="2"/><text x="6.3372%" y="543.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.03%)</title><rect x="6.0872%" y="517" width="0.0254%" height="15" fill="rgb(233,36,39)" fg:x="479" fg:w="2"/><text x="6.3372%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.06%)</title><rect x="6.0745%" y="597" width="0.0635%" height="15" fill="rgb(226,3,54)" fg:x="478" fg:w="5"/><text x="6.3245%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (4 samples, 0.05%)</title><rect x="6.0872%" y="581" width="0.0508%" height="15" fill="rgb(245,192,40)" fg:x="479" fg:w="4"/><text x="6.3372%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (4 samples, 0.05%)</title><rect x="6.0872%" y="565" width="0.0508%" height="15" fill="rgb(238,167,29)" fg:x="479" fg:w="4"/><text x="6.3372%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (4 samples, 0.05%)</title><rect x="6.0872%" y="549" width="0.0508%" height="15" fill="rgb(232,182,51)" fg:x="479" fg:w="4"/><text x="6.3372%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.03%)</title><rect x="6.1126%" y="533" width="0.0254%" height="15" fill="rgb(231,60,39)" fg:x="481" fg:w="2"/><text x="6.3626%" y="543.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.03%)</title><rect x="6.1126%" y="517" width="0.0254%" height="15" fill="rgb(208,69,12)" fg:x="481" fg:w="2"/><text x="6.3626%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="6.1126%" y="501" width="0.0254%" height="15" fill="rgb(235,93,37)" fg:x="481" fg:w="2"/><text x="6.3626%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="6.1126%" y="485" width="0.0254%" height="15" fill="rgb(213,116,39)" fg:x="481" fg:w="2"/><text x="6.3626%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="6.1126%" y="469" width="0.0254%" height="15" fill="rgb(222,207,29)" fg:x="481" fg:w="2"/><text x="6.3626%" y="479.50"></text></g><g><title>hikari_core::game::Game::run::{{closure}} (26 samples, 0.33%)</title><rect x="6.1380%" y="597" width="0.3304%" height="15" fill="rgb(206,96,30)" fg:x="483" fg:w="26"/><text x="6.3880%" y="607.50"></text></g><g><title>winit::window::Window::request_redraw (1 samples, 0.01%)</title><rect x="6.4557%" y="581" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="508" fg:w="1"/><text x="6.7057%" y="591.50"></text></g><g><title>winit::platform_impl::platform::Window::request_redraw (1 samples, 0.01%)</title><rect x="6.4557%" y="565" width="0.0127%" height="15" fill="rgb(250,191,14)" fg:x="508" fg:w="1"/><text x="6.7057%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::request_redraw (1 samples, 0.01%)</title><rect x="6.4557%" y="549" width="0.0127%" height="15" fill="rgb(239,60,40)" fg:x="508" fg:w="1"/><text x="6.7057%" y="559.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (6 samples, 0.08%)</title><rect x="6.4684%" y="597" width="0.0762%" height="15" fill="rgb(206,27,48)" fg:x="509" fg:w="6"/><text x="6.7184%" y="607.50"></text></g><g><title>mio_misc::channel::Sender&lt;T&gt;::send (1 samples, 0.01%)</title><rect x="6.5447%" y="597" width="0.0127%" height="15" fill="rgb(225,35,8)" fg:x="515" fg:w="1"/><text x="6.7947%" y="607.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (24 samples, 0.30%)</title><rect x="6.5574%" y="597" width="0.3050%" height="15" fill="rgb(250,213,24)" fg:x="516" fg:w="24"/><text x="6.8074%" y="607.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="6.8497%" y="581" width="0.0127%" height="15" fill="rgb(247,123,22)" fg:x="539" fg:w="1"/><text x="7.0997%" y="591.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (2 samples, 0.03%)</title><rect x="6.8624%" y="597" width="0.0254%" height="15" fill="rgb(231,138,38)" fg:x="540" fg:w="2"/><text x="7.1124%" y="607.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.03%)</title><rect x="6.8878%" y="597" width="0.0254%" height="15" fill="rgb(231,145,46)" fg:x="542" fg:w="2"/><text x="7.1378%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.03%)</title><rect x="6.8878%" y="581" width="0.0254%" height="15" fill="rgb(251,118,11)" fg:x="542" fg:w="2"/><text x="7.1378%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::now (2 samples, 0.03%)</title><rect x="6.8878%" y="565" width="0.0254%" height="15" fill="rgb(217,147,25)" fg:x="542" fg:w="2"/><text x="7.1378%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.01%)</title><rect x="7.1419%" y="565" width="0.0127%" height="15" fill="rgb(247,81,37)" fg:x="562" fg:w="1"/><text x="7.3919%" y="575.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.01%)</title><rect x="7.1419%" y="549" width="0.0127%" height="15" fill="rgb(209,12,38)" fg:x="562" fg:w="1"/><text x="7.3919%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.01%)</title><rect x="7.1419%" y="533" width="0.0127%" height="15" fill="rgb(227,1,9)" fg:x="562" fg:w="1"/><text x="7.3919%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="7.1547%" y="565" width="0.0381%" height="15" fill="rgb(248,47,43)" fg:x="563" fg:w="3"/><text x="7.4047%" y="575.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="7.1547%" y="549" width="0.0381%" height="15" fill="rgb(221,10,30)" fg:x="563" fg:w="3"/><text x="7.4047%" y="559.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="7.1547%" y="533" width="0.0381%" height="15" fill="rgb(210,229,1)" fg:x="563" fg:w="3"/><text x="7.4047%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::IntoIter&lt;winit::platform_impl::platform::x11::WindowId&gt;&gt; (2 samples, 0.03%)</title><rect x="7.1928%" y="565" width="0.0254%" height="15" fill="rgb(222,148,37)" fg:x="566" fg:w="2"/><text x="7.4428%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::IntoIter&lt;winit::platform_impl::platform::x11::WindowId&gt;&gt; (2 samples, 0.03%)</title><rect x="7.1928%" y="549" width="0.0254%" height="15" fill="rgb(234,67,33)" fg:x="566" fg:w="2"/><text x="7.4428%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;winit::platform_impl::platform::x11::WindowId,()&gt;&gt; (2 samples, 0.03%)</title><rect x="7.1928%" y="533" width="0.0254%" height="15" fill="rgb(247,98,35)" fg:x="566" fg:w="2"/><text x="7.4428%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(winit::platform_impl::platform::x11::WindowId,())&gt;&gt; (2 samples, 0.03%)</title><rect x="7.1928%" y="517" width="0.0254%" height="15" fill="rgb(247,138,52)" fg:x="566" fg:w="2"/><text x="7.4428%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="7.1928%" y="501" width="0.0254%" height="15" fill="rgb(213,79,30)" fg:x="566" fg:w="2"/><text x="7.4428%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="7.1928%" y="485" width="0.0254%" height="15" fill="rgb(246,177,23)" fg:x="566" fg:w="2"/><text x="7.4428%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.03%)</title><rect x="7.1928%" y="469" width="0.0254%" height="15" fill="rgb(230,62,27)" fg:x="566" fg:w="2"/><text x="7.4428%" y="479.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (4 samples, 0.05%)</title><rect x="7.2182%" y="565" width="0.0508%" height="15" fill="rgb(216,154,8)" fg:x="568" fg:w="4"/><text x="7.4682%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (4 samples, 0.05%)</title><rect x="7.2182%" y="549" width="0.0508%" height="15" fill="rgb(244,35,45)" fg:x="568" fg:w="4"/><text x="7.4682%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (4 samples, 0.05%)</title><rect x="7.2182%" y="533" width="0.0508%" height="15" fill="rgb(251,115,12)" fg:x="568" fg:w="4"/><text x="7.4682%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (4 samples, 0.05%)</title><rect x="7.2182%" y="517" width="0.0508%" height="15" fill="rgb(240,54,50)" fg:x="568" fg:w="4"/><text x="7.4682%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (4 samples, 0.05%)</title><rect x="7.2182%" y="501" width="0.0508%" height="15" fill="rgb(233,84,52)" fg:x="568" fg:w="4"/><text x="7.4682%" y="511.50"></text></g><g><title>std::collections::hash::map::RandomState::new (4 samples, 0.05%)</title><rect x="7.2182%" y="485" width="0.0508%" height="15" fill="rgb(207,117,47)" fg:x="568" fg:w="4"/><text x="7.4682%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.05%)</title><rect x="7.2182%" y="469" width="0.0508%" height="15" fill="rgb(249,43,39)" fg:x="568" fg:w="4"/><text x="7.4682%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.05%)</title><rect x="7.2182%" y="453" width="0.0508%" height="15" fill="rgb(209,38,44)" fg:x="568" fg:w="4"/><text x="7.4682%" y="463.50"></text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (8 samples, 0.10%)</title><rect x="7.2690%" y="565" width="0.1017%" height="15" fill="rgb(236,212,23)" fg:x="572" fg:w="8"/><text x="7.5190%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::drain_events (12 samples, 0.15%)</title><rect x="7.3707%" y="565" width="0.1525%" height="15" fill="rgb(242,79,21)" fg:x="580" fg:w="12"/><text x="7.6207%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll_one_event (12 samples, 0.15%)</title><rect x="7.3707%" y="549" width="0.1525%" height="15" fill="rgb(211,96,35)" fg:x="580" fg:w="12"/><text x="7.6207%" y="559.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (68 samples, 0.86%)</title><rect x="6.9132%" y="597" width="0.8642%" height="15" fill="rgb(253,215,40)" fg:x="544" fg:w="68"/><text x="7.1632%" y="607.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (68 samples, 0.86%)</title><rect x="6.9132%" y="581" width="0.8642%" height="15" fill="rgb(211,81,21)" fg:x="544" fg:w="68"/><text x="7.1632%" y="591.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll (20 samples, 0.25%)</title><rect x="7.5232%" y="565" width="0.2542%" height="15" fill="rgb(208,190,38)" fg:x="592" fg:w="20"/><text x="7.7732%" y="575.50"></text></g><g><title>[[stack]] (473 samples, 6.01%)</title><rect x="2.2366%" y="613" width="6.0109%" height="15" fill="rgb(235,213,38)" fg:x="176" fg:w="473"/><text x="2.4866%" y="623.50">[[stack]]</text></g><g><title>xcb_poll_for_reply64 (37 samples, 0.47%)</title><rect x="7.7774%" y="597" width="0.4702%" height="15" fill="rgb(237,122,38)" fg:x="612" fg:w="37"/><text x="8.0274%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.05%)</title><rect x="8.2476%" y="597" width="0.0508%" height="15" fill="rgb(244,218,35)" fg:x="649" fg:w="4"/><text x="8.4976%" y="607.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (4 samples, 0.05%)</title><rect x="8.2984%" y="597" width="0.0508%" height="15" fill="rgb(240,68,47)" fg:x="653" fg:w="4"/><text x="8.5484%" y="607.50"></text></g><g><title>[hikari_editor] (15 samples, 0.19%)</title><rect x="8.2476%" y="613" width="0.1906%" height="15" fill="rgb(210,16,53)" fg:x="649" fg:w="15"/><text x="8.4976%" y="623.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (7 samples, 0.09%)</title><rect x="8.3492%" y="597" width="0.0890%" height="15" fill="rgb(235,124,12)" fg:x="657" fg:w="7"/><text x="8.5992%" y="607.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (14 samples, 0.18%)</title><rect x="8.4382%" y="597" width="0.1779%" height="15" fill="rgb(224,169,11)" fg:x="664" fg:w="14"/><text x="8.6882%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="8.6161%" y="597" width="0.0254%" height="15" fill="rgb(250,166,2)" fg:x="678" fg:w="2"/><text x="8.8661%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.04%)</title><rect x="8.6415%" y="597" width="0.0381%" height="15" fill="rgb(242,216,29)" fg:x="680" fg:w="3"/><text x="8.8915%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="8.6796%" y="597" width="0.0127%" height="15" fill="rgb(230,116,27)" fg:x="683" fg:w="1"/><text x="8.9296%" y="607.50"></text></g><g><title>XCheckIfEvent (6 samples, 0.08%)</title><rect x="8.6923%" y="597" width="0.0762%" height="15" fill="rgb(228,99,48)" fg:x="684" fg:w="6"/><text x="8.9423%" y="607.50"></text></g><g><title>XPending (6 samples, 0.08%)</title><rect x="8.7686%" y="597" width="0.0762%" height="15" fill="rgb(253,11,6)" fg:x="690" fg:w="6"/><text x="9.0186%" y="607.50"></text></g><g><title>[libX11.so.6.4.0] (95 samples, 1.21%)</title><rect x="8.8448%" y="597" width="1.2073%" height="15" fill="rgb(247,143,39)" fg:x="696" fg:w="95"/><text x="9.0948%" y="607.50"></text></g><g><title>[libxcb.so.1.1.0] (110 samples, 1.40%)</title><rect x="10.0521%" y="597" width="1.3979%" height="15" fill="rgb(236,97,10)" fg:x="791" fg:w="110"/><text x="10.3021%" y="607.50"></text></g><g><title>_XEventsQueued (27 samples, 0.34%)</title><rect x="11.4500%" y="597" width="0.3431%" height="15" fill="rgb(233,208,19)" fg:x="901" fg:w="27"/><text x="11.7000%" y="607.50"></text></g><g><title>_XSend (9 samples, 0.11%)</title><rect x="11.7931%" y="597" width="0.1144%" height="15" fill="rgb(216,164,2)" fg:x="928" fg:w="9"/><text x="12.0431%" y="607.50"></text></g><g><title>__GI___libc_free (4 samples, 0.05%)</title><rect x="11.9075%" y="597" width="0.0508%" height="15" fill="rgb(220,129,5)" fg:x="937" fg:w="4"/><text x="12.1575%" y="607.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.09%)</title><rect x="11.9583%" y="597" width="0.0890%" height="15" fill="rgb(242,17,10)" fg:x="941" fg:w="7"/><text x="12.2083%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (3 samples, 0.04%)</title><rect x="12.0473%" y="597" width="0.0381%" height="15" fill="rgb(242,107,0)" fg:x="948" fg:w="3"/><text x="12.2973%" y="607.50"></text></g><g><title>__clock_gettime_2 (7 samples, 0.09%)</title><rect x="12.0854%" y="597" width="0.0890%" height="15" fill="rgb(251,28,31)" fg:x="951" fg:w="7"/><text x="12.3354%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.05%)</title><rect x="12.1235%" y="581" width="0.0508%" height="15" fill="rgb(233,223,10)" fg:x="954" fg:w="4"/><text x="12.3735%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="12.1744%" y="597" width="0.0127%" height="15" fill="rgb(215,21,27)" fg:x="958" fg:w="1"/><text x="12.4244%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.05%)</title><rect x="12.1871%" y="597" width="0.0508%" height="15" fill="rgb(232,23,21)" fg:x="959" fg:w="4"/><text x="12.4371%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.10%)</title><rect x="12.2379%" y="597" width="0.1017%" height="15" fill="rgb(244,5,23)" fg:x="963" fg:w="8"/><text x="12.4879%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.14%)</title><rect x="12.3396%" y="597" width="0.1398%" height="15" fill="rgb(226,81,46)" fg:x="971" fg:w="11"/><text x="12.5896%" y="607.50"></text></g><g><title>winit::event_loop::EventLoop&lt;()&gt;::new (1 samples, 0.01%)</title><rect x="12.4793%" y="581" width="0.0127%" height="15" fill="rgb(247,70,30)" fg:x="982" fg:w="1"/><text x="12.7293%" y="591.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::with_user_event (1 samples, 0.01%)</title><rect x="12.4793%" y="565" width="0.0127%" height="15" fill="rgb(212,68,19)" fg:x="982" fg:w="1"/><text x="12.7293%" y="575.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="12.4793%" y="549" width="0.0127%" height="15" fill="rgb(240,187,13)" fg:x="982" fg:w="1"/><text x="12.7293%" y="559.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new_any_thread (1 samples, 0.01%)</title><rect x="12.4793%" y="533" width="0.0127%" height="15" fill="rgb(223,113,26)" fg:x="982" fg:w="1"/><text x="12.7293%" y="543.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new_x11_any_thread (1 samples, 0.01%)</title><rect x="12.4793%" y="517" width="0.0127%" height="15" fill="rgb(206,192,2)" fg:x="982" fg:w="1"/><text x="12.7293%" y="527.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="12.4793%" y="501" width="0.0127%" height="15" fill="rgb(241,108,4)" fg:x="982" fg:w="1"/><text x="12.7293%" y="511.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::Ime::new (1 samples, 0.01%)</title><rect x="12.4793%" y="485" width="0.0127%" height="15" fill="rgb(247,173,49)" fg:x="982" fg:w="1"/><text x="12.7293%" y="495.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethods::open_im (1 samples, 0.01%)</title><rect x="12.4793%" y="469" width="0.0127%" height="15" fill="rgb(224,114,35)" fg:x="982" fg:w="1"/><text x="12.7293%" y="479.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethod::open_im (1 samples, 0.01%)</title><rect x="12.4793%" y="453" width="0.0127%" height="15" fill="rgb(245,159,27)" fg:x="982" fg:w="1"/><text x="12.7293%" y="463.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::open_im (1 samples, 0.01%)</title><rect x="12.4793%" y="437" width="0.0127%" height="15" fill="rgb(245,172,44)" fg:x="982" fg:w="1"/><text x="12.7293%" y="447.50"></text></g><g><title>_XimOpenIM (1 samples, 0.01%)</title><rect x="12.4793%" y="421" width="0.0127%" height="15" fill="rgb(236,23,11)" fg:x="982" fg:w="1"/><text x="12.7293%" y="431.50"></text></g><g><title>_XimProtoOpenIM (1 samples, 0.01%)</title><rect x="12.4793%" y="405" width="0.0127%" height="15" fill="rgb(205,117,38)" fg:x="982" fg:w="1"/><text x="12.7293%" y="415.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.01%)</title><rect x="12.4793%" y="389" width="0.0127%" height="15" fill="rgb(237,72,25)" fg:x="982" fg:w="1"/><text x="12.7293%" y="399.50"></text></g><g><title>_XlcOpenConverter (1 samples, 0.01%)</title><rect x="12.4793%" y="373" width="0.0127%" height="15" fill="rgb(244,70,9)" fg:x="982" fg:w="1"/><text x="12.7293%" y="383.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.01%)</title><rect x="12.4793%" y="357" width="0.0127%" height="15" fill="rgb(217,125,39)" fg:x="982" fg:w="1"/><text x="12.7293%" y="367.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.01%)</title><rect x="12.4793%" y="341" width="0.0127%" height="15" fill="rgb(235,36,10)" fg:x="982" fg:w="1"/><text x="12.7293%" y="351.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.01%)</title><rect x="12.4793%" y="325" width="0.0127%" height="15" fill="rgb(251,123,47)" fg:x="982" fg:w="1"/><text x="12.7293%" y="335.50"></text></g><g><title>_XlcGetCharSet (1 samples, 0.01%)</title><rect x="12.4793%" y="309" width="0.0127%" height="15" fill="rgb(221,13,13)" fg:x="982" fg:w="1"/><text x="12.7293%" y="319.50"></text></g><g><title>__GI___poll (4 samples, 0.05%)</title><rect x="12.4921%" y="373" width="0.0508%" height="15" fill="rgb(238,131,9)" fg:x="983" fg:w="4"/><text x="12.7421%" y="383.50"></text></g><g><title>hikari_core::game::Game::new (6 samples, 0.08%)</title><rect x="12.4793%" y="597" width="0.0762%" height="15" fill="rgb(211,50,8)" fg:x="982" fg:w="6"/><text x="12.7293%" y="607.50"></text></g><g><title>winit::window::WindowBuilder::build (5 samples, 0.06%)</title><rect x="12.4921%" y="581" width="0.0635%" height="15" fill="rgb(245,182,24)" fg:x="983" fg:w="5"/><text x="12.7421%" y="591.50"></text></g><g><title>winit::platform_impl::platform::Window::new (5 samples, 0.06%)</title><rect x="12.4921%" y="565" width="0.0635%" height="15" fill="rgb(242,14,37)" fg:x="983" fg:w="5"/><text x="12.7421%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::Window::new (5 samples, 0.06%)</title><rect x="12.4921%" y="549" width="0.0635%" height="15" fill="rgb(246,228,12)" fg:x="983" fg:w="5"/><text x="12.7421%" y="559.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::new (5 samples, 0.06%)</title><rect x="12.4921%" y="533" width="0.0635%" height="15" fill="rgb(213,55,15)" fg:x="983" fg:w="5"/><text x="12.7421%" y="543.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::set_decorations_inner (5 samples, 0.06%)</title><rect x="12.4921%" y="517" width="0.0635%" height="15" fill="rgb(209,9,3)" fg:x="983" fg:w="5"/><text x="12.7421%" y="527.50"></text></g><g><title>winit::platform_impl::platform::x11::util::hint::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::get_motif_hints (5 samples, 0.06%)</title><rect x="12.4921%" y="501" width="0.0635%" height="15" fill="rgb(230,59,30)" fg:x="983" fg:w="5"/><text x="12.7421%" y="511.50"></text></g><g><title>winit::platform_impl::platform::x11::util::atom::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::get_atom_unchecked (5 samples, 0.06%)</title><rect x="12.4921%" y="485" width="0.0635%" height="15" fill="rgb(209,121,21)" fg:x="983" fg:w="5"/><text x="12.7421%" y="495.50"></text></g><g><title>winit::platform_impl::platform::x11::util::atom::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::get_atom (5 samples, 0.06%)</title><rect x="12.4921%" y="469" width="0.0635%" height="15" fill="rgb(220,109,13)" fg:x="983" fg:w="5"/><text x="12.7421%" y="479.50"></text></g><g><title>XInternAtom (5 samples, 0.06%)</title><rect x="12.4921%" y="453" width="0.0635%" height="15" fill="rgb(232,18,1)" fg:x="983" fg:w="5"/><text x="12.7421%" y="463.50"></text></g><g><title>_XReply (5 samples, 0.06%)</title><rect x="12.4921%" y="437" width="0.0635%" height="15" fill="rgb(215,41,42)" fg:x="983" fg:w="5"/><text x="12.7421%" y="447.50"></text></g><g><title>xcb_wait_for_reply64 (5 samples, 0.06%)</title><rect x="12.4921%" y="421" width="0.0635%" height="15" fill="rgb(224,123,36)" fg:x="983" fg:w="5"/><text x="12.7421%" y="431.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="12.4921%" y="405" width="0.0635%" height="15" fill="rgb(240,125,3)" fg:x="983" fg:w="5"/><text x="12.7421%" y="415.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="12.4921%" y="389" width="0.0635%" height="15" fill="rgb(205,98,50)" fg:x="983" fg:w="5"/><text x="12.7421%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="12.5429%" y="373" width="0.0127%" height="15" fill="rgb(205,185,37)" fg:x="987" fg:w="1"/><text x="12.7929%" y="383.50"></text></g><g><title>hikari_core::game::Game::run::{{closure}} (42 samples, 0.53%)</title><rect x="12.5556%" y="597" width="0.5337%" height="15" fill="rgb(238,207,15)" fg:x="988" fg:w="42"/><text x="12.8056%" y="607.50"></text></g><g><title>winit::event_loop::EventLoop&lt;()&gt;::new (6 samples, 0.08%)</title><rect x="13.0893%" y="565" width="0.0762%" height="15" fill="rgb(213,199,42)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="575.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::with_user_event (6 samples, 0.08%)</title><rect x="13.0893%" y="549" width="0.0762%" height="15" fill="rgb(235,201,11)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="559.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new (6 samples, 0.08%)</title><rect x="13.0893%" y="533" width="0.0762%" height="15" fill="rgb(207,46,11)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="543.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new_any_thread (6 samples, 0.08%)</title><rect x="13.0893%" y="517" width="0.0762%" height="15" fill="rgb(241,35,35)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="527.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new_x11_any_thread (6 samples, 0.08%)</title><rect x="13.0893%" y="501" width="0.0762%" height="15" fill="rgb(243,32,47)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="511.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::new (6 samples, 0.08%)</title><rect x="13.0893%" y="485" width="0.0762%" height="15" fill="rgb(247,202,23)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="495.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::Ime::new (6 samples, 0.08%)</title><rect x="13.0893%" y="469" width="0.0762%" height="15" fill="rgb(219,102,11)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="479.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethods::open_im (6 samples, 0.08%)</title><rect x="13.0893%" y="453" width="0.0762%" height="15" fill="rgb(243,110,44)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="463.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethod::open_im (6 samples, 0.08%)</title><rect x="13.0893%" y="437" width="0.0762%" height="15" fill="rgb(222,74,54)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="447.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::open_im (6 samples, 0.08%)</title><rect x="13.0893%" y="421" width="0.0762%" height="15" fill="rgb(216,99,12)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="431.50"></text></g><g><title>_XimOpenIM (6 samples, 0.08%)</title><rect x="13.0893%" y="405" width="0.0762%" height="15" fill="rgb(226,22,26)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="415.50"></text></g><g><title>_XimProtoOpenIM (6 samples, 0.08%)</title><rect x="13.0893%" y="389" width="0.0762%" height="15" fill="rgb(217,163,10)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="399.50"></text></g><g><title>XInternAtom (6 samples, 0.08%)</title><rect x="13.0893%" y="373" width="0.0762%" height="15" fill="rgb(213,25,53)" fg:x="1030" fg:w="6"/><text x="13.3393%" y="383.50"></text></g><g><title>_XReply (5 samples, 0.06%)</title><rect x="13.1020%" y="357" width="0.0635%" height="15" fill="rgb(252,105,26)" fg:x="1031" fg:w="5"/><text x="13.3520%" y="367.50"></text></g><g><title>xcb_wait_for_reply64 (5 samples, 0.06%)</title><rect x="13.1020%" y="341" width="0.0635%" height="15" fill="rgb(220,39,43)" fg:x="1031" fg:w="5"/><text x="13.3520%" y="351.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="13.1020%" y="325" width="0.0635%" height="15" fill="rgb(229,68,48)" fg:x="1031" fg:w="5"/><text x="13.3520%" y="335.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="13.1020%" y="309" width="0.0635%" height="15" fill="rgb(252,8,32)" fg:x="1031" fg:w="5"/><text x="13.3520%" y="319.50"></text></g><g><title>__GI___poll (5 samples, 0.06%)</title><rect x="13.1020%" y="293" width="0.0635%" height="15" fill="rgb(223,20,43)" fg:x="1031" fg:w="5"/><text x="13.3520%" y="303.50"></text></g><g><title>hikari_editor::main (7 samples, 0.09%)</title><rect x="13.0893%" y="597" width="0.0890%" height="15" fill="rgb(229,81,49)" fg:x="1030" fg:w="7"/><text x="13.3393%" y="607.50"></text></g><g><title>hikari_core::game::Game::new (7 samples, 0.09%)</title><rect x="13.0893%" y="581" width="0.0890%" height="15" fill="rgb(236,28,36)" fg:x="1030" fg:w="7"/><text x="13.3393%" y="591.50"></text></g><g><title>winit::window::WindowBuilder::build (1 samples, 0.01%)</title><rect x="13.1656%" y="565" width="0.0127%" height="15" fill="rgb(249,185,26)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="575.50"></text></g><g><title>winit::platform_impl::platform::Window::new (1 samples, 0.01%)</title><rect x="13.1656%" y="549" width="0.0127%" height="15" fill="rgb(249,174,33)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="559.50"></text></g><g><title>winit::platform_impl::platform::x11::Window::new (1 samples, 0.01%)</title><rect x="13.1656%" y="533" width="0.0127%" height="15" fill="rgb(233,201,37)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="543.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::new (1 samples, 0.01%)</title><rect x="13.1656%" y="517" width="0.0127%" height="15" fill="rgb(221,78,26)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="527.50"></text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::set_window_types (1 samples, 0.01%)</title><rect x="13.1656%" y="501" width="0.0127%" height="15" fill="rgb(250,127,30)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="13.1656%" y="485" width="0.0127%" height="15" fill="rgb(230,49,44)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="13.1656%" y="469" width="0.0127%" height="15" fill="rgb(229,67,23)" fg:x="1036" fg:w="1"/><text x="13.4156%" y="479.50"></text></g><g><title>mio::event::events::Events::clear (3 samples, 0.04%)</title><rect x="13.1783%" y="597" width="0.0381%" height="15" fill="rgb(249,83,47)" fg:x="1037" fg:w="3"/><text x="13.4283%" y="607.50"></text></g><g><title>mio::poll::Poll::poll (20 samples, 0.25%)</title><rect x="13.2164%" y="597" width="0.2542%" height="15" fill="rgb(215,43,3)" fg:x="1040" fg:w="20"/><text x="13.4664%" y="607.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (4 samples, 0.05%)</title><rect x="13.4197%" y="581" width="0.0508%" height="15" fill="rgb(238,154,13)" fg:x="1056" fg:w="4"/><text x="13.6697%" y="591.50"></text></g><g><title>mio_misc::channel::Sender&lt;T&gt;::send (3 samples, 0.04%)</title><rect x="13.4706%" y="597" width="0.0381%" height="15" fill="rgb(219,56,2)" fg:x="1060" fg:w="3"/><text x="13.7206%" y="607.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (24 samples, 0.30%)</title><rect x="13.5087%" y="597" width="0.3050%" height="15" fill="rgb(233,0,4)" fg:x="1063" fg:w="24"/><text x="13.7587%" y="607.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (6 samples, 0.08%)</title><rect x="13.8137%" y="597" width="0.0762%" height="15" fill="rgb(235,30,7)" fg:x="1087" fg:w="6"/><text x="14.0637%" y="607.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (5 samples, 0.06%)</title><rect x="13.8899%" y="597" width="0.0635%" height="15" fill="rgb(250,79,13)" fg:x="1093" fg:w="5"/><text x="14.1399%" y="607.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.05%)</title><rect x="13.9535%" y="597" width="0.0508%" height="15" fill="rgb(211,146,34)" fg:x="1098" fg:w="4"/><text x="14.2035%" y="607.50"></text></g><g><title>__GI___poll (4 samples, 0.05%)</title><rect x="14.0043%" y="357" width="0.0508%" height="15" fill="rgb(228,22,38)" fg:x="1102" fg:w="4"/><text x="14.2543%" y="367.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="14.0043%" y="597" width="0.0635%" height="15" fill="rgb(235,168,5)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="607.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::Ime::new (5 samples, 0.06%)</title><rect x="14.0043%" y="581" width="0.0635%" height="15" fill="rgb(221,155,16)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="591.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethods::open_im (5 samples, 0.06%)</title><rect x="14.0043%" y="565" width="0.0635%" height="15" fill="rgb(215,215,53)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethod::open_im (5 samples, 0.06%)</title><rect x="14.0043%" y="549" width="0.0635%" height="15" fill="rgb(223,4,10)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="559.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::open_im (5 samples, 0.06%)</title><rect x="14.0043%" y="533" width="0.0635%" height="15" fill="rgb(234,103,6)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="543.50"></text></g><g><title>_XimOpenIM (5 samples, 0.06%)</title><rect x="14.0043%" y="517" width="0.0635%" height="15" fill="rgb(227,97,0)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="527.50"></text></g><g><title>_XimProtoOpenIM (5 samples, 0.06%)</title><rect x="14.0043%" y="501" width="0.0635%" height="15" fill="rgb(234,150,53)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="511.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.06%)</title><rect x="14.0043%" y="485" width="0.0635%" height="15" fill="rgb(228,201,54)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="495.50"></text></g><g><title>_XimRead (5 samples, 0.06%)</title><rect x="14.0043%" y="469" width="0.0635%" height="15" fill="rgb(222,22,37)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="479.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.06%)</title><rect x="14.0043%" y="453" width="0.0635%" height="15" fill="rgb(237,53,32)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="463.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.06%)</title><rect x="14.0043%" y="437" width="0.0635%" height="15" fill="rgb(233,25,53)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="447.50"></text></g><g><title>XIfEvent (5 samples, 0.06%)</title><rect x="14.0043%" y="421" width="0.0635%" height="15" fill="rgb(210,40,34)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="431.50"></text></g><g><title>_XReadEvents (5 samples, 0.06%)</title><rect x="14.0043%" y="405" width="0.0635%" height="15" fill="rgb(241,220,44)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="415.50"></text></g><g><title>xcb_wait_for_event (5 samples, 0.06%)</title><rect x="14.0043%" y="389" width="0.0635%" height="15" fill="rgb(235,28,35)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="399.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="14.0043%" y="373" width="0.0635%" height="15" fill="rgb(210,56,17)" fg:x="1102" fg:w="5"/><text x="14.2543%" y="383.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="14.0552%" y="357" width="0.0127%" height="15" fill="rgb(224,130,29)" fg:x="1106" fg:w="1"/><text x="14.3052%" y="367.50"></text></g><g><title>__GI___poll (4 samples, 0.05%)</title><rect x="14.0679%" y="405" width="0.0508%" height="15" fill="rgb(235,212,8)" fg:x="1107" fg:w="4"/><text x="14.3179%" y="415.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::Ime::new (5 samples, 0.06%)</title><rect x="14.0679%" y="597" width="0.0635%" height="15" fill="rgb(223,33,50)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="607.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethods::open_im (5 samples, 0.06%)</title><rect x="14.0679%" y="581" width="0.0635%" height="15" fill="rgb(219,149,13)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="591.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::PotentialInputMethod::open_im (5 samples, 0.06%)</title><rect x="14.0679%" y="565" width="0.0635%" height="15" fill="rgb(250,156,29)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="575.50"></text></g><g><title>winit::platform_impl::platform::x11::ime::input_method::open_im (5 samples, 0.06%)</title><rect x="14.0679%" y="549" width="0.0635%" height="15" fill="rgb(216,193,19)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="559.50"></text></g><g><title>_XimOpenIM (5 samples, 0.06%)</title><rect x="14.0679%" y="533" width="0.0635%" height="15" fill="rgb(216,135,14)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="543.50"></text></g><g><title>_XimProtoOpenIM (5 samples, 0.06%)</title><rect x="14.0679%" y="517" width="0.0635%" height="15" fill="rgb(241,47,5)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="527.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.06%)</title><rect x="14.0679%" y="501" width="0.0635%" height="15" fill="rgb(233,42,35)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="511.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.06%)</title><rect x="14.0679%" y="485" width="0.0635%" height="15" fill="rgb(231,13,6)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="495.50"></text></g><g><title>XIfEvent (5 samples, 0.06%)</title><rect x="14.0679%" y="469" width="0.0635%" height="15" fill="rgb(207,181,40)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="479.50"></text></g><g><title>_XReadEvents (5 samples, 0.06%)</title><rect x="14.0679%" y="453" width="0.0635%" height="15" fill="rgb(254,173,49)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="463.50"></text></g><g><title>xcb_wait_for_event (5 samples, 0.06%)</title><rect x="14.0679%" y="437" width="0.0635%" height="15" fill="rgb(221,1,38)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="447.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="14.0679%" y="421" width="0.0635%" height="15" fill="rgb(206,124,46)" fg:x="1107" fg:w="5"/><text x="14.3179%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.01%)</title><rect x="14.1187%" y="405" width="0.0127%" height="15" fill="rgb(249,21,11)" fg:x="1111" fg:w="1"/><text x="14.3687%" y="415.50"></text></g><g><title>winit::platform_impl::platform::x11::xdisplay::XConnection::new (1 samples, 0.01%)</title><rect x="14.1314%" y="597" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="607.50"></text></g><g><title>x11_dl::xlib::Xlib::open (1 samples, 0.01%)</title><rect x="14.1314%" y="581" width="0.0127%" height="15" fill="rgb(235,61,29)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="591.50"></text></g><g><title>x11_dl::xlib::Xlib::init (1 samples, 0.01%)</title><rect x="14.1314%" y="565" width="0.0127%" height="15" fill="rgb(219,207,3)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="575.50"></text></g><g><title>x11_dl::link::DynamicLibrary::symbol (1 samples, 0.01%)</title><rect x="14.1314%" y="549" width="0.0127%" height="15" fill="rgb(222,56,46)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="559.50"></text></g><g><title>dlsym (1 samples, 0.01%)</title><rect x="14.1314%" y="533" width="0.0127%" height="15" fill="rgb(239,76,54)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="543.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.01%)</title><rect x="14.1314%" y="517" width="0.0127%" height="15" fill="rgb(231,124,27)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="527.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.01%)</title><rect x="14.1314%" y="501" width="0.0127%" height="15" fill="rgb(249,195,6)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="511.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.01%)</title><rect x="14.1314%" y="485" width="0.0127%" height="15" fill="rgb(237,174,47)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="495.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.01%)</title><rect x="14.1314%" y="469" width="0.0127%" height="15" fill="rgb(206,201,31)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="479.50"></text></g><g><title>do_sym (1 samples, 0.01%)</title><rect x="14.1314%" y="453" width="0.0127%" height="15" fill="rgb(231,57,52)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="463.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.01%)</title><rect x="14.1314%" y="437" width="0.0127%" height="15" fill="rgb(248,177,22)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="447.50"></text></g><g><title>do_lookup_x (1 samples, 0.01%)</title><rect x="14.1314%" y="421" width="0.0127%" height="15" fill="rgb(215,211,37)" fg:x="1112" fg:w="1"/><text x="14.3814%" y="431.50"></text></g><g><title>[unknown] (484 samples, 6.15%)</title><rect x="8.4382%" y="613" width="6.1507%" height="15" fill="rgb(241,128,51)" fg:x="664" fg:w="484"/><text x="8.6882%" y="623.50">[unknown]</text></g><g><title>xcb_poll_for_reply64 (35 samples, 0.44%)</title><rect x="14.1441%" y="597" width="0.4448%" height="15" fill="rgb(227,165,31)" fg:x="1113" fg:w="35"/><text x="14.3941%" y="607.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.08%)</title><rect x="14.5889%" y="613" width="0.0762%" height="15" fill="rgb(228,167,24)" fg:x="1148" fg:w="6"/><text x="14.8389%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (2 samples, 0.03%)</title><rect x="14.6651%" y="613" width="0.0254%" height="15" fill="rgb(228,143,12)" fg:x="1154" fg:w="2"/><text x="14.9151%" y="623.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.01%)</title><rect x="14.6906%" y="613" width="0.0127%" height="15" fill="rgb(249,149,8)" fg:x="1156" fg:w="1"/><text x="14.9406%" y="623.50"></text></g><g><title>std::process::exit (1 samples, 0.01%)</title><rect x="14.7668%" y="293" width="0.0127%" height="15" fill="rgb(243,35,44)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="303.50"></text></g><g><title>std::rt::cleanup (1 samples, 0.01%)</title><rect x="14.7668%" y="277" width="0.0127%" height="15" fill="rgb(246,89,9)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="287.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.01%)</title><rect x="14.7668%" y="261" width="0.0127%" height="15" fill="rgb(233,213,13)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="271.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.01%)</title><rect x="14.7668%" y="245" width="0.0127%" height="15" fill="rgb(233,141,41)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="255.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.01%)</title><rect x="14.7668%" y="229" width="0.0127%" height="15" fill="rgb(239,167,4)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="239.50"></text></g><g><title>std::rt::cleanup::{{closure}} (1 samples, 0.01%)</title><rect x="14.7668%" y="213" width="0.0127%" height="15" fill="rgb(209,217,16)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="223.50"></text></g><g><title>std::sys::unix::cleanup (1 samples, 0.01%)</title><rect x="14.7668%" y="197" width="0.0127%" height="15" fill="rgb(219,88,35)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="207.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 0.01%)</title><rect x="14.7668%" y="181" width="0.0127%" height="15" fill="rgb(220,193,23)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="191.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.01%)</title><rect x="14.7668%" y="165" width="0.0127%" height="15" fill="rgb(230,90,52)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="175.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.01%)</title><rect x="14.7668%" y="149" width="0.0127%" height="15" fill="rgb(252,106,19)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="159.50"></text></g><g><title>__GI___sysconf (1 samples, 0.01%)</title><rect x="14.7668%" y="133" width="0.0127%" height="15" fill="rgb(206,74,20)" fg:x="1162" fg:w="1"/><text x="15.0168%" y="143.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (10 samples, 0.13%)</title><rect x="14.7795%" y="293" width="0.1271%" height="15" fill="rgb(230,138,44)" fg:x="1163" fg:w="10"/><text x="15.0295%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="15.6055%" y="277" width="0.0254%" height="15" fill="rgb(235,182,43)" fg:x="1228" fg:w="2"/><text x="15.8555%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.05%)</title><rect x="16.8382%" y="181" width="0.0508%" height="15" fill="rgb(242,16,51)" fg:x="1325" fg:w="4"/><text x="17.0882%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.05%)</title><rect x="16.8382%" y="165" width="0.0508%" height="15" fill="rgb(248,9,4)" fg:x="1325" fg:w="4"/><text x="17.0882%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::buckets (2 samples, 0.03%)</title><rect x="16.8891%" y="181" width="0.0254%" height="15" fill="rgb(210,31,22)" fg:x="1329" fg:w="2"/><text x="17.1391%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (22 samples, 0.28%)</title><rect x="16.7111%" y="213" width="0.2796%" height="15" fill="rgb(239,54,39)" fg:x="1315" fg:w="22"/><text x="16.9611%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (12 samples, 0.15%)</title><rect x="16.8382%" y="197" width="0.1525%" height="15" fill="rgb(230,99,41)" fg:x="1325" fg:w="12"/><text x="17.0882%" y="207.50"></text></g><g><title>hashbrown::raw::calculate_layout (6 samples, 0.08%)</title><rect x="16.9145%" y="181" width="0.0762%" height="15" fill="rgb(253,106,12)" fg:x="1331" fg:w="6"/><text x="17.1645%" y="191.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (6 samples, 0.08%)</title><rect x="16.9145%" y="165" width="0.0762%" height="15" fill="rgb(213,46,41)" fg:x="1331" fg:w="6"/><text x="17.1645%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (5 samples, 0.06%)</title><rect x="16.9272%" y="149" width="0.0635%" height="15" fill="rgb(215,133,35)" fg:x="1332" fg:w="5"/><text x="17.1772%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (5 samples, 0.06%)</title><rect x="16.9272%" y="133" width="0.0635%" height="15" fill="rgb(213,28,5)" fg:x="1332" fg:w="5"/><text x="17.1772%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.03%)</title><rect x="16.9907%" y="181" width="0.0254%" height="15" fill="rgb(215,77,49)" fg:x="1337" fg:w="2"/><text x="17.2407%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.03%)</title><rect x="16.9907%" y="165" width="0.0254%" height="15" fill="rgb(248,100,22)" fg:x="1337" fg:w="2"/><text x="17.2407%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.03%)</title><rect x="17.0161%" y="165" width="0.0254%" height="15" fill="rgb(208,67,9)" fg:x="1339" fg:w="2"/><text x="17.2661%" y="175.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (113 samples, 1.44%)</title><rect x="15.6310%" y="277" width="1.4360%" height="15" fill="rgb(219,133,21)" fg:x="1230" fg:w="113"/><text x="15.8810%" y="287.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (113 samples, 1.44%)</title><rect x="15.6310%" y="261" width="1.4360%" height="15" fill="rgb(246,46,29)" fg:x="1230" fg:w="113"/><text x="15.8810%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (33 samples, 0.42%)</title><rect x="16.6476%" y="245" width="0.4194%" height="15" fill="rgb(246,185,52)" fg:x="1310" fg:w="33"/><text x="16.8976%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (31 samples, 0.39%)</title><rect x="16.6730%" y="229" width="0.3940%" height="15" fill="rgb(252,136,11)" fg:x="1312" fg:w="31"/><text x="16.9230%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (6 samples, 0.08%)</title><rect x="16.9907%" y="213" width="0.0762%" height="15" fill="rgb(219,138,53)" fg:x="1337" fg:w="6"/><text x="17.2407%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (6 samples, 0.08%)</title><rect x="16.9907%" y="197" width="0.0762%" height="15" fill="rgb(211,51,23)" fg:x="1337" fg:w="6"/><text x="17.2407%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 0.05%)</title><rect x="17.0161%" y="181" width="0.0508%" height="15" fill="rgb(247,221,28)" fg:x="1339" fg:w="4"/><text x="17.2661%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.03%)</title><rect x="17.0416%" y="165" width="0.0254%" height="15" fill="rgb(251,222,45)" fg:x="1341" fg:w="2"/><text x="17.2916%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.03%)</title><rect x="17.0416%" y="149" width="0.0254%" height="15" fill="rgb(217,162,53)" fg:x="1341" fg:w="2"/><text x="17.2916%" y="159.50"></text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.69%)</title><rect x="17.0670%" y="277" width="0.6862%" height="15" fill="rgb(229,93,14)" fg:x="1343" fg:w="54"/><text x="17.3170%" y="287.50"></text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.69%)</title><rect x="17.0670%" y="261" width="0.6862%" height="15" fill="rgb(209,67,49)" fg:x="1343" fg:w="54"/><text x="17.3170%" y="271.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.69%)</title><rect x="17.0670%" y="245" width="0.6862%" height="15" fill="rgb(213,87,29)" fg:x="1343" fg:w="54"/><text x="17.3170%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.69%)</title><rect x="17.0670%" y="229" width="0.6862%" height="15" fill="rgb(205,151,52)" fg:x="1343" fg:w="54"/><text x="17.3170%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.36%)</title><rect x="17.3974%" y="213" width="0.3558%" height="15" fill="rgb(253,215,39)" fg:x="1369" fg:w="28"/><text x="17.6474%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.17%)</title><rect x="17.5880%" y="197" width="0.1652%" height="15" fill="rgb(221,220,41)" fg:x="1384" fg:w="13"/><text x="17.8380%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.06%)</title><rect x="17.6897%" y="181" width="0.0635%" height="15" fill="rgb(218,133,21)" fg:x="1392" fg:w="5"/><text x="17.9397%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4 samples, 0.05%)</title><rect x="17.7532%" y="277" width="0.0508%" height="15" fill="rgb(221,193,43)" fg:x="1397" fg:w="4"/><text x="18.0032%" y="287.50"></text></g><g><title>__GI___libc_free (46 samples, 0.58%)</title><rect x="17.8930%" y="165" width="0.5846%" height="15" fill="rgb(240,128,52)" fg:x="1408" fg:w="46"/><text x="18.1430%" y="175.50"></text></g><g><title>_int_free (29 samples, 0.37%)</title><rect x="18.1090%" y="149" width="0.3685%" height="15" fill="rgb(253,114,12)" fg:x="1425" fg:w="29"/><text x="18.3590%" y="159.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.04%)</title><rect x="18.4776%" y="165" width="0.0381%" height="15" fill="rgb(215,223,47)" fg:x="1454" fg:w="3"/><text x="18.7276%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.04%)</title><rect x="18.4776%" y="149" width="0.0381%" height="15" fill="rgb(248,225,23)" fg:x="1454" fg:w="3"/><text x="18.7276%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::IntoIter&lt;winit::platform_impl::platform::x11::WindowId&gt;&gt; (61 samples, 0.78%)</title><rect x="17.8040%" y="277" width="0.7752%" height="15" fill="rgb(250,108,0)" fg:x="1401" fg:w="61"/><text x="18.0540%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::IntoIter&lt;winit::platform_impl::platform::x11::WindowId&gt;&gt; (61 samples, 0.78%)</title><rect x="17.8040%" y="261" width="0.7752%" height="15" fill="rgb(228,208,7)" fg:x="1401" fg:w="61"/><text x="18.0540%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;winit::platform_impl::platform::x11::WindowId,()&gt;&gt; (61 samples, 0.78%)</title><rect x="17.8040%" y="245" width="0.7752%" height="15" fill="rgb(244,45,10)" fg:x="1401" fg:w="61"/><text x="18.0540%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(winit::platform_impl::platform::x11::WindowId,())&gt;&gt; (61 samples, 0.78%)</title><rect x="17.8040%" y="229" width="0.7752%" height="15" fill="rgb(207,125,25)" fg:x="1401" fg:w="61"/><text x="18.0540%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.78%)</title><rect x="17.8040%" y="213" width="0.7752%" height="15" fill="rgb(210,195,18)" fg:x="1401" fg:w="61"/><text x="18.0540%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (54 samples, 0.69%)</title><rect x="17.8930%" y="197" width="0.6862%" height="15" fill="rgb(249,80,12)" fg:x="1408" fg:w="54"/><text x="18.1430%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.69%)</title><rect x="17.8930%" y="181" width="0.6862%" height="15" fill="rgb(221,65,9)" fg:x="1408" fg:w="54"/><text x="18.1430%" y="191.50"></text></g><g><title>__rust_dealloc (5 samples, 0.06%)</title><rect x="18.5157%" y="165" width="0.0635%" height="15" fill="rgb(235,49,36)" fg:x="1457" fg:w="5"/><text x="18.7657%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="18.7317%" y="245" width="0.0127%" height="15" fill="rgb(225,32,20)" fg:x="1474" fg:w="1"/><text x="18.9817%" y="255.50"></text></g><g><title>core::cmp::min (7 samples, 0.09%)</title><rect x="18.7444%" y="213" width="0.0890%" height="15" fill="rgb(215,141,46)" fg:x="1475" fg:w="7"/><text x="18.9944%" y="223.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.09%)</title><rect x="18.7444%" y="197" width="0.0890%" height="15" fill="rgb(250,160,47)" fg:x="1475" fg:w="7"/><text x="18.9944%" y="207.50"></text></g><g><title>mio::poll::Poll::poll (7 samples, 0.09%)</title><rect x="18.7444%" y="181" width="0.0890%" height="15" fill="rgb(216,222,40)" fg:x="1475" fg:w="7"/><text x="18.9944%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.17%)</title><rect x="18.7444%" y="245" width="0.1652%" height="15" fill="rgb(234,217,39)" fg:x="1475" fg:w="13"/><text x="18.9944%" y="255.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (13 samples, 0.17%)</title><rect x="18.7444%" y="229" width="0.1652%" height="15" fill="rgb(207,178,40)" fg:x="1475" fg:w="13"/><text x="18.9944%" y="239.50"></text></g><g><title>core::time::Duration::as_millis (6 samples, 0.08%)</title><rect x="18.8334%" y="213" width="0.0762%" height="15" fill="rgb(221,136,13)" fg:x="1482" fg:w="6"/><text x="19.0834%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (11 samples, 0.14%)</title><rect x="18.9096%" y="245" width="0.1398%" height="15" fill="rgb(249,199,10)" fg:x="1488" fg:w="11"/><text x="19.1596%" y="255.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (8 samples, 0.10%)</title><rect x="18.9478%" y="229" width="0.1017%" height="15" fill="rgb(249,222,13)" fg:x="1491" fg:w="8"/><text x="19.1978%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (8 samples, 0.10%)</title><rect x="18.9478%" y="213" width="0.1017%" height="15" fill="rgb(244,185,38)" fg:x="1491" fg:w="8"/><text x="19.1978%" y="223.50"></text></g><g><title>mio::poll::Poll::poll (145 samples, 1.84%)</title><rect x="18.5792%" y="277" width="1.8427%" height="15" fill="rgb(236,202,9)" fg:x="1462" fg:w="145"/><text x="18.8292%" y="287.50">m..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (133 samples, 1.69%)</title><rect x="18.7317%" y="261" width="1.6902%" height="15" fill="rgb(250,229,37)" fg:x="1474" fg:w="133"/><text x="18.9817%" y="271.50"></text></g><g><title>epoll_wait (108 samples, 1.37%)</title><rect x="19.0494%" y="245" width="1.3725%" height="15" fill="rgb(206,174,23)" fg:x="1499" fg:w="108"/><text x="19.2994%" y="255.50"></text></g><g><title>XCheckIfEvent (3 samples, 0.04%)</title><rect x="20.4982%" y="245" width="0.0381%" height="15" fill="rgb(211,33,43)" fg:x="1613" fg:w="3"/><text x="20.7482%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.04%)</title><rect x="20.4982%" y="229" width="0.0381%" height="15" fill="rgb(245,58,50)" fg:x="1613" fg:w="3"/><text x="20.7482%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.14%)</title><rect x="20.7269%" y="165" width="0.1398%" height="15" fill="rgb(244,68,36)" fg:x="1631" fg:w="11"/><text x="20.9769%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.11%)</title><rect x="20.7523%" y="149" width="0.1144%" height="15" fill="rgb(232,229,15)" fg:x="1633" fg:w="9"/><text x="21.0023%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.24%)</title><rect x="20.9302%" y="149" width="0.2415%" height="15" fill="rgb(254,30,23)" fg:x="1647" fg:w="19"/><text x="21.1802%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (51 samples, 0.65%)</title><rect x="20.5998%" y="213" width="0.6481%" height="15" fill="rgb(235,160,14)" fg:x="1621" fg:w="51"/><text x="20.8498%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (51 samples, 0.65%)</title><rect x="20.5998%" y="197" width="0.6481%" height="15" fill="rgb(212,155,44)" fg:x="1621" fg:w="51"/><text x="20.8498%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (51 samples, 0.65%)</title><rect x="20.5998%" y="181" width="0.6481%" height="15" fill="rgb(226,2,50)" fg:x="1621" fg:w="51"/><text x="20.8498%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (30 samples, 0.38%)</title><rect x="20.8667%" y="165" width="0.3812%" height="15" fill="rgb(234,177,6)" fg:x="1642" fg:w="30"/><text x="21.1167%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.08%)</title><rect x="21.1717%" y="149" width="0.0762%" height="15" fill="rgb(217,24,9)" fg:x="1666" fg:w="6"/><text x="21.4217%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (11 samples, 0.14%)</title><rect x="21.2479%" y="213" width="0.1398%" height="15" fill="rgb(220,13,46)" fg:x="1672" fg:w="11"/><text x="21.4979%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.11%)</title><rect x="21.2734%" y="197" width="0.1144%" height="15" fill="rgb(239,221,27)" fg:x="1674" fg:w="9"/><text x="21.5234%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.06%)</title><rect x="21.3242%" y="181" width="0.0635%" height="15" fill="rgb(222,198,25)" fg:x="1678" fg:w="5"/><text x="21.5742%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.06%)</title><rect x="21.3242%" y="165" width="0.0635%" height="15" fill="rgb(211,99,13)" fg:x="1678" fg:w="5"/><text x="21.5742%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.08%)</title><rect x="21.6800%" y="101" width="0.0762%" height="15" fill="rgb(232,111,31)" fg:x="1706" fg:w="6"/><text x="21.9300%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.15%)</title><rect x="21.6419%" y="117" width="0.1525%" height="15" fill="rgb(245,82,37)" fg:x="1703" fg:w="12"/><text x="21.8919%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="21.7563%" y="101" width="0.0381%" height="15" fill="rgb(227,149,46)" fg:x="1712" fg:w="3"/><text x="22.0063%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.03%)</title><rect x="21.7944%" y="117" width="0.0254%" height="15" fill="rgb(218,36,50)" fg:x="1715" fg:w="2"/><text x="22.0444%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.04%)</title><rect x="21.8198%" y="117" width="0.0381%" height="15" fill="rgb(226,80,48)" fg:x="1717" fg:w="3"/><text x="22.0698%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 0.46%)</title><rect x="21.4258%" y="133" width="0.4575%" height="15" fill="rgb(238,224,15)" fg:x="1686" fg:w="36"/><text x="21.6758%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.03%)</title><rect x="21.8579%" y="117" width="0.0254%" height="15" fill="rgb(241,136,10)" fg:x="1720" fg:w="2"/><text x="22.1079%" y="127.50"></text></g><g><title>hashbrown::map::make_insert_hash (104 samples, 1.32%)</title><rect x="20.5998%" y="229" width="1.3216%" height="15" fill="rgb(208,32,45)" fg:x="1621" fg:w="104"/><text x="20.8498%" y="239.50"></text></g><g><title>&lt;winit::platform_impl::platform::x11::WindowId as core::hash::Hash&gt;::hash (42 samples, 0.53%)</title><rect x="21.3877%" y="213" width="0.5337%" height="15" fill="rgb(207,135,9)" fg:x="1683" fg:w="42"/><text x="21.6377%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (42 samples, 0.53%)</title><rect x="21.3877%" y="197" width="0.5337%" height="15" fill="rgb(206,86,44)" fg:x="1683" fg:w="42"/><text x="21.6377%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (42 samples, 0.53%)</title><rect x="21.3877%" y="181" width="0.5337%" height="15" fill="rgb(245,177,15)" fg:x="1683" fg:w="42"/><text x="21.6377%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (39 samples, 0.50%)</title><rect x="21.4258%" y="165" width="0.4956%" height="15" fill="rgb(206,64,50)" fg:x="1686" fg:w="39"/><text x="21.6758%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (39 samples, 0.50%)</title><rect x="21.4258%" y="149" width="0.4956%" height="15" fill="rgb(234,36,40)" fg:x="1686" fg:w="39"/><text x="21.6758%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.04%)</title><rect x="21.8833%" y="133" width="0.0381%" height="15" fill="rgb(213,64,8)" fg:x="1722" fg:w="3"/><text x="22.1333%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="22.0231%" y="181" width="0.0127%" height="15" fill="rgb(210,75,36)" fg:x="1733" fg:w="1"/><text x="22.2731%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.01%)</title><rect x="22.0231%" y="165" width="0.0127%" height="15" fill="rgb(229,88,21)" fg:x="1733" fg:w="1"/><text x="22.2731%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="22.0231%" y="149" width="0.0127%" height="15" fill="rgb(252,204,47)" fg:x="1733" fg:w="1"/><text x="22.2731%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.01%)</title><rect x="22.0231%" y="133" width="0.0127%" height="15" fill="rgb(208,77,27)" fg:x="1733" fg:w="1"/><text x="22.2731%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="22.0231%" y="197" width="0.0254%" height="15" fill="rgb(221,76,26)" fg:x="1733" fg:w="2"/><text x="22.2731%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="22.0358%" y="181" width="0.0127%" height="15" fill="rgb(225,139,18)" fg:x="1734" fg:w="1"/><text x="22.2858%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.03%)</title><rect x="22.0485%" y="149" width="0.0254%" height="15" fill="rgb(230,137,11)" fg:x="1735" fg:w="2"/><text x="22.2985%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="22.0740%" y="149" width="0.0127%" height="15" fill="rgb(212,28,1)" fg:x="1737" fg:w="1"/><text x="22.3240%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.05%)</title><rect x="22.0867%" y="149" width="0.0508%" height="15" fill="rgb(248,164,17)" fg:x="1738" fg:w="4"/><text x="22.3367%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.05%)</title><rect x="22.0867%" y="133" width="0.0508%" height="15" fill="rgb(222,171,42)" fg:x="1738" fg:w="4"/><text x="22.3367%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.05%)</title><rect x="22.0867%" y="117" width="0.0508%" height="15" fill="rgb(243,84,45)" fg:x="1738" fg:w="4"/><text x="22.3367%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20 samples, 0.25%)</title><rect x="21.9215%" y="229" width="0.2542%" height="15" fill="rgb(252,49,23)" fg:x="1725" fg:w="20"/><text x="22.1715%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.25%)</title><rect x="21.9215%" y="213" width="0.2542%" height="15" fill="rgb(215,19,7)" fg:x="1725" fg:w="20"/><text x="22.1715%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (10 samples, 0.13%)</title><rect x="22.0485%" y="197" width="0.1271%" height="15" fill="rgb(238,81,41)" fg:x="1735" fg:w="10"/><text x="22.2985%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (10 samples, 0.13%)</title><rect x="22.0485%" y="181" width="0.1271%" height="15" fill="rgb(210,199,37)" fg:x="1735" fg:w="10"/><text x="22.2985%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (10 samples, 0.13%)</title><rect x="22.0485%" y="165" width="0.1271%" height="15" fill="rgb(244,192,49)" fg:x="1735" fg:w="10"/><text x="22.2985%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.04%)</title><rect x="22.1375%" y="149" width="0.0381%" height="15" fill="rgb(226,211,11)" fg:x="1742" fg:w="3"/><text x="22.3875%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.04%)</title><rect x="22.1375%" y="133" width="0.0381%" height="15" fill="rgb(236,162,54)" fg:x="1742" fg:w="3"/><text x="22.3875%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.04%)</title><rect x="22.1375%" y="117" width="0.0381%" height="15" fill="rgb(220,229,9)" fg:x="1742" fg:w="3"/><text x="22.3875%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.04%)</title><rect x="22.1375%" y="101" width="0.0381%" height="15" fill="rgb(250,87,22)" fg:x="1742" fg:w="3"/><text x="22.3875%" y="111.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.03%)</title><rect x="22.2265%" y="213" width="0.0254%" height="15" fill="rgb(239,43,17)" fg:x="1749" fg:w="2"/><text x="22.4765%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.03%)</title><rect x="22.2265%" y="197" width="0.0254%" height="15" fill="rgb(231,177,25)" fg:x="1749" fg:w="2"/><text x="22.4765%" y="207.50"></text></g><g><title>core::ptr::write (2 samples, 0.03%)</title><rect x="22.2265%" y="181" width="0.0254%" height="15" fill="rgb(219,179,1)" fg:x="1749" fg:w="2"/><text x="22.4765%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4 samples, 0.05%)</title><rect x="22.2519%" y="213" width="0.0508%" height="15" fill="rgb(238,219,53)" fg:x="1751" fg:w="4"/><text x="22.5019%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.05%)</title><rect x="22.2519%" y="197" width="0.0508%" height="15" fill="rgb(232,167,36)" fg:x="1751" fg:w="4"/><text x="22.5019%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.05%)</title><rect x="22.2519%" y="181" width="0.0508%" height="15" fill="rgb(244,19,51)" fg:x="1751" fg:w="4"/><text x="22.5019%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.05%)</title><rect x="22.2519%" y="165" width="0.0508%" height="15" fill="rgb(224,6,22)" fg:x="1751" fg:w="4"/><text x="22.5019%" y="175.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.05%)</title><rect x="22.3535%" y="181" width="0.0508%" height="15" fill="rgb(224,145,5)" fg:x="1759" fg:w="4"/><text x="22.6035%" y="191.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.05%)</title><rect x="22.3535%" y="165" width="0.0508%" height="15" fill="rgb(234,130,49)" fg:x="1759" fg:w="4"/><text x="22.6035%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.03%)</title><rect x="22.4044%" y="181" width="0.0254%" height="15" fill="rgb(254,6,2)" fg:x="1763" fg:w="2"/><text x="22.6544%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.03%)</title><rect x="22.4044%" y="165" width="0.0254%" height="15" fill="rgb(208,96,46)" fg:x="1763" fg:w="2"/><text x="22.6544%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.23%)</title><rect x="22.4933%" y="165" width="0.2287%" height="15" fill="rgb(239,3,39)" fg:x="1770" fg:w="18"/><text x="22.7433%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.13%)</title><rect x="22.7221%" y="165" width="0.1271%" height="15" fill="rgb(233,210,1)" fg:x="1788" fg:w="10"/><text x="22.9721%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.13%)</title><rect x="22.7221%" y="149" width="0.1271%" height="15" fill="rgb(244,137,37)" fg:x="1788" fg:w="10"/><text x="22.9721%" y="159.50"></text></g><g><title>core::mem::swap (31 samples, 0.39%)</title><rect x="22.8492%" y="165" width="0.3940%" height="15" fill="rgb(240,136,2)" fg:x="1798" fg:w="31"/><text x="23.0992%" y="175.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (31 samples, 0.39%)</title><rect x="22.8492%" y="149" width="0.3940%" height="15" fill="rgb(239,18,37)" fg:x="1798" fg:w="31"/><text x="23.0992%" y="159.50"></text></g><g><title>core::ptr::swap_nonoverlapping (31 samples, 0.39%)</title><rect x="22.8492%" y="133" width="0.3940%" height="15" fill="rgb(218,185,22)" fg:x="1798" fg:w="31"/><text x="23.0992%" y="143.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (31 samples, 0.39%)</title><rect x="22.8492%" y="117" width="0.3940%" height="15" fill="rgb(225,218,4)" fg:x="1798" fg:w="31"/><text x="23.0992%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.39%)</title><rect x="22.8492%" y="101" width="0.3940%" height="15" fill="rgb(230,182,32)" fg:x="1798" fg:w="31"/><text x="23.0992%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (1 samples, 0.01%)</title><rect x="23.2431%" y="165" width="0.0127%" height="15" fill="rgb(242,56,43)" fg:x="1829" fg:w="1"/><text x="23.4931%" y="175.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="23.2431%" y="149" width="0.0127%" height="15" fill="rgb(233,99,24)" fg:x="1829" fg:w="1"/><text x="23.4931%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (1 samples, 0.01%)</title><rect x="23.2431%" y="133" width="0.0127%" height="15" fill="rgb(234,209,42)" fg:x="1829" fg:w="1"/><text x="23.4931%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (1 samples, 0.01%)</title><rect x="23.2431%" y="117" width="0.0127%" height="15" fill="rgb(227,7,12)" fg:x="1829" fg:w="1"/><text x="23.4931%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.01%)</title><rect x="23.2558%" y="133" width="0.0127%" height="15" fill="rgb(245,203,43)" fg:x="1830" fg:w="1"/><text x="23.5058%" y="143.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.01%)</title><rect x="23.2558%" y="117" width="0.0127%" height="15" fill="rgb(238,205,33)" fg:x="1830" fg:w="1"/><text x="23.5058%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (12 samples, 0.15%)</title><rect x="23.2685%" y="133" width="0.1525%" height="15" fill="rgb(231,56,7)" fg:x="1831" fg:w="12"/><text x="23.5185%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (12 samples, 0.15%)</title><rect x="23.2685%" y="117" width="0.1525%" height="15" fill="rgb(244,186,29)" fg:x="1831" fg:w="12"/><text x="23.5185%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (3 samples, 0.04%)</title><rect x="23.4210%" y="117" width="0.0381%" height="15" fill="rgb(234,111,31)" fg:x="1843" fg:w="3"/><text x="23.6710%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (19 samples, 0.24%)</title><rect x="23.2558%" y="165" width="0.2415%" height="15" fill="rgb(241,149,10)" fg:x="1830" fg:w="19"/><text x="23.5058%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (19 samples, 0.24%)</title><rect x="23.2558%" y="149" width="0.2415%" height="15" fill="rgb(249,206,44)" fg:x="1830" fg:w="19"/><text x="23.5058%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (6 samples, 0.08%)</title><rect x="23.4210%" y="133" width="0.0762%" height="15" fill="rgb(251,153,30)" fg:x="1843" fg:w="6"/><text x="23.6710%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.04%)</title><rect x="23.4591%" y="117" width="0.0381%" height="15" fill="rgb(239,152,38)" fg:x="1846" fg:w="3"/><text x="23.7091%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.04%)</title><rect x="23.4591%" y="101" width="0.0381%" height="15" fill="rgb(249,139,47)" fg:x="1846" fg:w="3"/><text x="23.7091%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (543 samples, 6.90%)</title><rect x="23.5100%" y="133" width="6.9005%" height="15" fill="rgb(244,64,35)" fg:x="1850" fg:w="543"/><text x="23.7600%" y="143.50">core::ptr..</text></g><g><title>core::intrinsics::write_bytes (543 samples, 6.90%)</title><rect x="23.5100%" y="117" width="6.9005%" height="15" fill="rgb(216,46,15)" fg:x="1850" fg:w="543"/><text x="23.7600%" y="127.50">core::int..</text></g><g><title>__memset_avx2_unaligned_erms (540 samples, 6.86%)</title><rect x="23.5481%" y="101" width="6.8624%" height="15" fill="rgb(250,74,19)" fg:x="1853" fg:w="540"/><text x="23.7981%" y="111.50">__memset_..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.03%)</title><rect x="30.4867%" y="101" width="0.0254%" height="15" fill="rgb(249,42,33)" fg:x="2399" fg:w="2"/><text x="30.7367%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.03%)</title><rect x="30.4867%" y="85" width="0.0254%" height="15" fill="rgb(242,149,17)" fg:x="2399" fg:w="2"/><text x="30.7367%" y="95.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (7 samples, 0.09%)</title><rect x="30.4486%" y="117" width="0.0890%" height="15" fill="rgb(244,29,21)" fg:x="2396" fg:w="7"/><text x="30.6986%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.03%)</title><rect x="30.5121%" y="101" width="0.0254%" height="15" fill="rgb(220,130,37)" fg:x="2401" fg:w="2"/><text x="30.7621%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2 samples, 0.03%)</title><rect x="30.5121%" y="85" width="0.0254%" height="15" fill="rgb(211,67,2)" fg:x="2401" fg:w="2"/><text x="30.7621%" y="95.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.42%)</title><rect x="30.5757%" y="53" width="0.4194%" height="15" fill="rgb(235,68,52)" fg:x="2406" fg:w="33"/><text x="30.8257%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="30.9950%" y="53" width="0.0127%" height="15" fill="rgb(246,142,3)" fg:x="2439" fg:w="1"/><text x="31.2450%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="30.9950%" y="37" width="0.0127%" height="15" fill="rgb(241,25,7)" fg:x="2439" fg:w="1"/><text x="31.2450%" y="47.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (39 samples, 0.50%)</title><rect x="30.5376%" y="117" width="0.4956%" height="15" fill="rgb(242,119,39)" fg:x="2403" fg:w="39"/><text x="30.7876%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.50%)</title><rect x="30.5376%" y="101" width="0.4956%" height="15" fill="rgb(241,98,45)" fg:x="2403" fg:w="39"/><text x="30.7876%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.50%)</title><rect x="30.5376%" y="85" width="0.4956%" height="15" fill="rgb(254,28,30)" fg:x="2403" fg:w="39"/><text x="30.7876%" y="95.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.48%)</title><rect x="30.5503%" y="69" width="0.4829%" height="15" fill="rgb(241,142,54)" fg:x="2404" fg:w="38"/><text x="30.8003%" y="79.50"></text></g><g><title>__rust_alloc (2 samples, 0.03%)</title><rect x="31.0078%" y="53" width="0.0254%" height="15" fill="rgb(222,85,15)" fg:x="2440" fg:w="2"/><text x="31.2578%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (50 samples, 0.64%)</title><rect x="30.4105%" y="133" width="0.6354%" height="15" fill="rgb(210,85,47)" fg:x="2393" fg:w="50"/><text x="30.6605%" y="143.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.01%)</title><rect x="31.0332%" y="117" width="0.0127%" height="15" fill="rgb(224,206,25)" fg:x="2442" fg:w="1"/><text x="31.2832%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (686 samples, 8.72%)</title><rect x="22.4298%" y="181" width="8.7178%" height="15" fill="rgb(243,201,19)" fg:x="1765" fg:w="686"/><text x="22.6798%" y="191.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (602 samples, 7.65%)</title><rect x="23.4973%" y="165" width="7.6503%" height="15" fill="rgb(236,59,4)" fg:x="1849" fg:w="602"/><text x="23.7473%" y="175.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (601 samples, 7.64%)</title><rect x="23.5100%" y="149" width="7.6376%" height="15" fill="rgb(254,179,45)" fg:x="1850" fg:w="601"/><text x="23.7600%" y="159.50">hashbrown:..</text></g><g><title>hashbrown::raw::capacity_to_buckets (8 samples, 0.10%)</title><rect x="31.0459%" y="133" width="0.1017%" height="15" fill="rgb(226,14,10)" fg:x="2443" fg:w="8"/><text x="31.2959%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (703 samples, 8.93%)</title><rect x="22.3027%" y="213" width="8.9338%" height="15" fill="rgb(244,27,41)" fg:x="1755" fg:w="703"/><text x="22.5527%" y="223.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (703 samples, 8.93%)</title><rect x="22.3027%" y="197" width="8.9338%" height="15" fill="rgb(235,35,32)" fg:x="1755" fg:w="703"/><text x="22.5527%" y="207.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (7 samples, 0.09%)</title><rect x="31.1475%" y="181" width="0.0890%" height="15" fill="rgb(218,68,31)" fg:x="2451" fg:w="7"/><text x="31.3975%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (3 samples, 0.04%)</title><rect x="31.6304%" y="197" width="0.0381%" height="15" fill="rgb(207,120,37)" fg:x="2489" fg:w="3"/><text x="31.8804%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.01%)</title><rect x="31.6686%" y="197" width="0.0127%" height="15" fill="rgb(227,98,0)" fg:x="2492" fg:w="1"/><text x="31.9186%" y="207.50"></text></g><g><title>hashbrown::raw::is_full (24 samples, 0.30%)</title><rect x="31.6813%" y="197" width="0.3050%" height="15" fill="rgb(207,7,3)" fg:x="2493" fg:w="24"/><text x="31.9313%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.13%)</title><rect x="31.9863%" y="197" width="0.1271%" height="15" fill="rgb(206,98,19)" fg:x="2517" fg:w="10"/><text x="32.2363%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.13%)</title><rect x="31.9863%" y="181" width="0.1271%" height="15" fill="rgb(217,5,26)" fg:x="2517" fg:w="10"/><text x="32.2363%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.13%)</title><rect x="31.9863%" y="165" width="0.1271%" height="15" fill="rgb(235,190,38)" fg:x="2517" fg:w="10"/><text x="32.2363%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (94 samples, 1.19%)</title><rect x="31.2365%" y="213" width="1.1946%" height="15" fill="rgb(247,86,24)" fg:x="2458" fg:w="94"/><text x="31.4865%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (25 samples, 0.32%)</title><rect x="32.1134%" y="197" width="0.3177%" height="15" fill="rgb(205,101,16)" fg:x="2527" fg:w="25"/><text x="32.3634%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.32%)</title><rect x="32.1134%" y="181" width="0.3177%" height="15" fill="rgb(246,168,33)" fg:x="2527" fg:w="25"/><text x="32.3634%" y="191.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (959 samples, 12.19%)</title><rect x="20.4219%" y="277" width="12.1871%" height="15" fill="rgb(231,114,1)" fg:x="1607" fg:w="959"/><text x="20.6719%" y="287.50">std::collections::..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (959 samples, 12.19%)</title><rect x="20.4219%" y="261" width="12.1871%" height="15" fill="rgb(207,184,53)" fg:x="1607" fg:w="959"/><text x="20.6719%" y="271.50">hashbrown::set::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (950 samples, 12.07%)</title><rect x="20.5363%" y="245" width="12.0727%" height="15" fill="rgb(224,95,51)" fg:x="1616" fg:w="950"/><text x="20.7863%" y="255.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (821 samples, 10.43%)</title><rect x="22.1756%" y="229" width="10.4333%" height="15" fill="rgb(212,188,45)" fg:x="1745" fg:w="821"/><text x="22.4256%" y="239.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (14 samples, 0.18%)</title><rect x="32.4311%" y="213" width="0.1779%" height="15" fill="rgb(223,154,38)" fg:x="2552" fg:w="14"/><text x="32.6811%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (11 samples, 0.14%)</title><rect x="32.4692%" y="197" width="0.1398%" height="15" fill="rgb(251,22,52)" fg:x="2555" fg:w="11"/><text x="32.7192%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (11 samples, 0.14%)</title><rect x="32.4692%" y="181" width="0.1398%" height="15" fill="rgb(229,209,22)" fg:x="2555" fg:w="11"/><text x="32.7192%" y="191.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (30 samples, 0.38%)</title><rect x="32.6217%" y="149" width="0.3812%" height="15" fill="rgb(234,138,34)" fg:x="2567" fg:w="30"/><text x="32.8717%" y="159.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.19%)</title><rect x="32.8123%" y="133" width="0.1906%" height="15" fill="rgb(212,95,11)" fg:x="2582" fg:w="15"/><text x="33.0623%" y="143.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (14 samples, 0.18%)</title><rect x="32.8250%" y="117" width="0.1779%" height="15" fill="rgb(240,179,47)" fg:x="2583" fg:w="14"/><text x="33.0750%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.18%)</title><rect x="32.8250%" y="101" width="0.1779%" height="15" fill="rgb(240,163,11)" fg:x="2583" fg:w="14"/><text x="33.0750%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.05%)</title><rect x="33.1681%" y="133" width="0.0508%" height="15" fill="rgb(236,37,12)" fg:x="2610" fg:w="4"/><text x="33.4181%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.05%)</title><rect x="33.1681%" y="117" width="0.0508%" height="15" fill="rgb(232,164,16)" fg:x="2610" fg:w="4"/><text x="33.4181%" y="127.50"></text></g><g><title>core::mem::replace (4 samples, 0.05%)</title><rect x="33.1681%" y="101" width="0.0508%" height="15" fill="rgb(244,205,15)" fg:x="2610" fg:w="4"/><text x="33.4181%" y="111.50"></text></g><g><title>core::ptr::write (4 samples, 0.05%)</title><rect x="33.1681%" y="85" width="0.0508%" height="15" fill="rgb(223,117,47)" fg:x="2610" fg:w="4"/><text x="33.4181%" y="95.50"></text></g><g><title>std::collections::hash::map::RandomState::new::{{closure}} (20 samples, 0.25%)</title><rect x="33.0029%" y="149" width="0.2542%" height="15" fill="rgb(244,107,35)" fg:x="2597" fg:w="20"/><text x="33.2529%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.04%)</title><rect x="33.2190%" y="133" width="0.0381%" height="15" fill="rgb(205,140,8)" fg:x="2614" fg:w="3"/><text x="33.4690%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (54 samples, 0.69%)</title><rect x="32.6217%" y="213" width="0.6862%" height="15" fill="rgb(228,84,46)" fg:x="2567" fg:w="54"/><text x="32.8717%" y="223.50"></text></g><g><title>std::collections::hash::map::RandomState::new (54 samples, 0.69%)</title><rect x="32.6217%" y="197" width="0.6862%" height="15" fill="rgb(254,188,9)" fg:x="2567" fg:w="54"/><text x="32.8717%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 0.69%)</title><rect x="32.6217%" y="181" width="0.6862%" height="15" fill="rgb(206,112,54)" fg:x="2567" fg:w="54"/><text x="32.8717%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (54 samples, 0.69%)</title><rect x="32.6217%" y="165" width="0.6862%" height="15" fill="rgb(216,84,49)" fg:x="2567" fg:w="54"/><text x="32.8717%" y="175.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (4 samples, 0.05%)</title><rect x="33.2571%" y="149" width="0.0508%" height="15" fill="rgb(214,194,35)" fg:x="2617" fg:w="4"/><text x="33.5071%" y="159.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (61 samples, 0.78%)</title><rect x="32.6090%" y="277" width="0.7752%" height="15" fill="rgb(249,28,3)" fg:x="2566" fg:w="61"/><text x="32.8590%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (61 samples, 0.78%)</title><rect x="32.6090%" y="261" width="0.7752%" height="15" fill="rgb(222,56,52)" fg:x="2566" fg:w="61"/><text x="32.8590%" y="271.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (60 samples, 0.76%)</title><rect x="32.6217%" y="245" width="0.7625%" height="15" fill="rgb(245,217,50)" fg:x="2567" fg:w="60"/><text x="32.8717%" y="255.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (60 samples, 0.76%)</title><rect x="32.6217%" y="229" width="0.7625%" height="15" fill="rgb(213,201,24)" fg:x="2567" fg:w="60"/><text x="32.8717%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (6 samples, 0.08%)</title><rect x="33.3079%" y="213" width="0.0762%" height="15" fill="rgb(248,116,28)" fg:x="2621" fg:w="6"/><text x="33.5579%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_in (6 samples, 0.08%)</title><rect x="33.3079%" y="197" width="0.0762%" height="15" fill="rgb(219,72,43)" fg:x="2621" fg:w="6"/><text x="33.5579%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_in (6 samples, 0.08%)</title><rect x="33.3079%" y="181" width="0.0762%" height="15" fill="rgb(209,138,14)" fg:x="2621" fg:w="6"/><text x="33.5579%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::static_empty (3 samples, 0.04%)</title><rect x="33.3460%" y="165" width="0.0381%" height="15" fill="rgb(222,18,33)" fg:x="2624" fg:w="3"/><text x="33.5960%" y="175.50"></text></g><g><title>std::sync::mpsc::oneshot::Packet&lt;T&gt;::try_recv (8 samples, 0.10%)</title><rect x="33.9814%" y="261" width="0.1017%" height="15" fill="rgb(213,199,7)" fg:x="2674" fg:w="8"/><text x="34.2314%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.10%)</title><rect x="33.9814%" y="245" width="0.1017%" height="15" fill="rgb(250,110,10)" fg:x="2674" fg:w="8"/><text x="34.2314%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.10%)</title><rect x="33.9814%" y="229" width="0.1017%" height="15" fill="rgb(248,123,6)" fg:x="2674" fg:w="8"/><text x="34.2314%" y="239.50"></text></g><g><title>__GI___libc_free (47 samples, 0.60%)</title><rect x="34.7948%" y="245" width="0.5973%" height="15" fill="rgb(206,91,31)" fg:x="2738" fg:w="47"/><text x="35.0448%" y="255.50"></text></g><g><title>_int_free (34 samples, 0.43%)</title><rect x="34.9600%" y="229" width="0.4321%" height="15" fill="rgb(211,154,13)" fg:x="2751" fg:w="34"/><text x="35.2100%" y="239.50"></text></g><g><title>__rust_dealloc (5 samples, 0.06%)</title><rect x="35.3920%" y="245" width="0.0635%" height="15" fill="rgb(225,148,7)" fg:x="2785" fg:w="5"/><text x="35.6420%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.06%)</title><rect x="35.5827%" y="229" width="0.0635%" height="15" fill="rgb(220,160,43)" fg:x="2800" fg:w="5"/><text x="35.8327%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (5 samples, 0.06%)</title><rect x="35.5827%" y="213" width="0.0635%" height="15" fill="rgb(213,52,39)" fg:x="2800" fg:w="5"/><text x="35.8327%" y="223.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (211 samples, 2.68%)</title><rect x="33.3842%" y="277" width="2.6814%" height="15" fill="rgb(243,137,7)" fg:x="2627" fg:w="211"/><text x="33.6342%" y="287.50">st..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (156 samples, 1.98%)</title><rect x="34.0831%" y="261" width="1.9825%" height="15" fill="rgb(230,79,13)" fg:x="2682" fg:w="156"/><text x="34.3331%" y="271.50">s..</text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::pop (48 samples, 0.61%)</title><rect x="35.4556%" y="245" width="0.6100%" height="15" fill="rgb(247,105,23)" fg:x="2790" fg:w="48"/><text x="35.7056%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (33 samples, 0.42%)</title><rect x="35.6462%" y="229" width="0.4194%" height="15" fill="rgb(223,179,41)" fg:x="2805" fg:w="33"/><text x="35.8962%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.42%)</title><rect x="35.6462%" y="213" width="0.4194%" height="15" fill="rgb(218,9,34)" fg:x="2805" fg:w="33"/><text x="35.8962%" y="223.50"></text></g><g><title>std::time::Instant::now (206 samples, 2.62%)</title><rect x="36.0656%" y="277" width="2.6179%" height="15" fill="rgb(222,106,8)" fg:x="2838" fg:w="206"/><text x="36.3156%" y="287.50">st..</text></g><g><title>std::sys::unix::time::inner::Instant::now (206 samples, 2.62%)</title><rect x="36.0656%" y="261" width="2.6179%" height="15" fill="rgb(211,220,0)" fg:x="2838" fg:w="206"/><text x="36.3156%" y="271.50">st..</text></g><g><title>std::sys::unix::time::inner::now (206 samples, 2.62%)</title><rect x="36.0656%" y="245" width="2.6179%" height="15" fill="rgb(229,52,16)" fg:x="2838" fg:w="206"/><text x="36.3156%" y="255.50">st..</text></g><g><title>__clock_gettime_2 (200 samples, 2.54%)</title><rect x="36.1418%" y="229" width="2.5416%" height="15" fill="rgb(212,155,18)" fg:x="2844" fg:w="200"/><text x="36.3918%" y="239.50">__..</text></g><g><title>__vdso_clock_gettime (193 samples, 2.45%)</title><rect x="36.2308%" y="213" width="2.4527%" height="15" fill="rgb(242,21,14)" fg:x="2851" fg:w="193"/><text x="36.4808%" y="223.50">__..</text></g><g><title>[[vdso]] (118 samples, 1.50%)</title><rect x="37.1839%" y="197" width="1.4996%" height="15" fill="rgb(222,19,48)" fg:x="2926" fg:w="118"/><text x="37.4339%" y="207.50"></text></g><g><title>&lt;winit::event_loop::ControlFlow as core::cmp::PartialEq&gt;::eq (6 samples, 0.08%)</title><rect x="39.0011%" y="261" width="0.0762%" height="15" fill="rgb(232,45,27)" fg:x="3069" fg:w="6"/><text x="39.2511%" y="271.50"></text></g><g><title>hikari_editor::main::{{closure}} (5 samples, 0.06%)</title><rect x="39.2172%" y="245" width="0.0635%" height="15" fill="rgb(249,103,42)" fg:x="3086" fg:w="5"/><text x="39.4672%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (5 samples, 0.06%)</title><rect x="39.3188%" y="197" width="0.0635%" height="15" fill="rgb(246,81,33)" fg:x="3094" fg:w="5"/><text x="39.5688%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="39.4713%" y="181" width="0.0127%" height="15" fill="rgb(252,33,42)" fg:x="3106" fg:w="1"/><text x="39.7213%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.04%)</title><rect x="39.5476%" y="165" width="0.0381%" height="15" fill="rgb(209,212,41)" fg:x="3112" fg:w="3"/><text x="39.7976%" y="175.50"></text></g><g><title>__memset_avx2_unaligned_erms (19 samples, 0.24%)</title><rect x="39.7890%" y="117" width="0.2415%" height="15" fill="rgb(207,154,6)" fg:x="3131" fg:w="19"/><text x="40.0390%" y="127.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.32%)</title><rect x="40.0305%" y="53" width="0.3177%" height="15" fill="rgb(223,64,47)" fg:x="3150" fg:w="25"/><text x="40.2805%" y="63.50"></text></g><g><title>_int_malloc (22 samples, 0.28%)</title><rect x="40.0686%" y="37" width="0.2796%" height="15" fill="rgb(211,161,38)" fg:x="3153" fg:w="22"/><text x="40.3186%" y="47.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.57%)</title><rect x="39.7890%" y="133" width="0.5719%" height="15" fill="rgb(219,138,40)" fg:x="3131" fg:w="45"/><text x="40.0390%" y="143.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.33%)</title><rect x="40.0305%" y="117" width="0.3304%" height="15" fill="rgb(241,228,46)" fg:x="3150" fg:w="26"/><text x="40.2805%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.33%)</title><rect x="40.0305%" y="101" width="0.3304%" height="15" fill="rgb(223,209,38)" fg:x="3150" fg:w="26"/><text x="40.2805%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.33%)</title><rect x="40.0305%" y="85" width="0.3304%" height="15" fill="rgb(236,164,45)" fg:x="3150" fg:w="26"/><text x="40.2805%" y="95.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.33%)</title><rect x="40.0305%" y="69" width="0.3304%" height="15" fill="rgb(231,15,5)" fg:x="3150" fg:w="26"/><text x="40.2805%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="40.3482%" y="53" width="0.0127%" height="15" fill="rgb(252,35,15)" fg:x="3175" fg:w="1"/><text x="40.5982%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.01%)</title><rect x="40.3482%" y="37" width="0.0127%" height="15" fill="rgb(248,181,18)" fg:x="3175" fg:w="1"/><text x="40.5982%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;crossbeam_queue::seg_queue::Block&lt;mio_misc::scheduler::ScheduleEntryId&gt;&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="40.3609%" y="133" width="0.0127%" height="15" fill="rgb(233,39,42)" fg:x="3176" fg:w="1"/><text x="40.6109%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.01%)</title><rect x="40.3736%" y="133" width="0.0127%" height="15" fill="rgb(238,110,33)" fg:x="3177" fg:w="1"/><text x="40.6236%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="40.3736%" y="117" width="0.0127%" height="15" fill="rgb(233,195,10)" fg:x="3177" fg:w="1"/><text x="40.6236%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.03%)</title><rect x="40.3863%" y="133" width="0.0254%" height="15" fill="rgb(254,105,3)" fg:x="3178" fg:w="2"/><text x="40.6363%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="40.3863%" y="117" width="0.0254%" height="15" fill="rgb(221,225,9)" fg:x="3178" fg:w="2"/><text x="40.6363%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (2 samples, 0.03%)</title><rect x="40.4117%" y="133" width="0.0254%" height="15" fill="rgb(224,227,45)" fg:x="3180" fg:w="2"/><text x="40.6617%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_store (2 samples, 0.03%)</title><rect x="40.4117%" y="117" width="0.0254%" height="15" fill="rgb(229,198,43)" fg:x="3180" fg:w="2"/><text x="40.6617%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (80 samples, 1.02%)</title><rect x="40.4372%" y="133" width="1.0166%" height="15" fill="rgb(206,209,35)" fg:x="3182" fg:w="80"/><text x="40.6872%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (80 samples, 1.02%)</title><rect x="40.4372%" y="117" width="1.0166%" height="15" fill="rgb(245,195,53)" fg:x="3182" fg:w="80"/><text x="40.6872%" y="127.50"></text></g><g><title>crossbeam_queue::seg_queue::SegQueue&lt;T&gt;::push (202 samples, 2.57%)</title><rect x="39.6365%" y="149" width="2.5670%" height="15" fill="rgb(240,92,26)" fg:x="3119" fg:w="202"/><text x="39.8865%" y="159.50">cr..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (59 samples, 0.75%)</title><rect x="41.4538%" y="133" width="0.7498%" height="15" fill="rgb(207,40,23)" fg:x="3262" fg:w="59"/><text x="41.7038%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_or (59 samples, 0.75%)</title><rect x="41.4538%" y="117" width="0.7498%" height="15" fill="rgb(223,111,35)" fg:x="3262" fg:w="59"/><text x="41.7038%" y="127.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (8 samples, 0.10%)</title><rect x="42.4577%" y="85" width="0.1017%" height="15" fill="rgb(229,147,28)" fg:x="3341" fg:w="8"/><text x="42.7077%" y="95.50"></text></g><g><title>__libc_write (111 samples, 1.41%)</title><rect x="42.5594%" y="85" width="1.4106%" height="15" fill="rgb(211,29,28)" fg:x="3349" fg:w="111"/><text x="42.8094%" y="95.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (142 samples, 1.80%)</title><rect x="42.2036%" y="149" width="1.8045%" height="15" fill="rgb(228,72,33)" fg:x="3321" fg:w="142"/><text x="42.4536%" y="159.50">m..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (131 samples, 1.66%)</title><rect x="42.3434%" y="133" width="1.6648%" height="15" fill="rgb(205,214,31)" fg:x="3332" fg:w="131"/><text x="42.5934%" y="143.50"></text></g><g><title>std::sys::unix::fs::File::write (125 samples, 1.59%)</title><rect x="42.4196%" y="117" width="1.5885%" height="15" fill="rgb(224,111,15)" fg:x="3338" fg:w="125"/><text x="42.6696%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (125 samples, 1.59%)</title><rect x="42.4196%" y="101" width="1.5885%" height="15" fill="rgb(253,21,26)" fg:x="3338" fg:w="125"/><text x="42.6696%" y="111.50"></text></g><g><title>core::cmp::min (3 samples, 0.04%)</title><rect x="43.9700%" y="85" width="0.0381%" height="15" fill="rgb(245,139,43)" fg:x="3460" fg:w="3"/><text x="44.2200%" y="95.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.04%)</title><rect x="43.9700%" y="69" width="0.0381%" height="15" fill="rgb(252,170,7)" fg:x="3460" fg:w="3"/><text x="44.2200%" y="79.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (3 samples, 0.04%)</title><rect x="43.9700%" y="53" width="0.0381%" height="15" fill="rgb(231,118,14)" fg:x="3460" fg:w="3"/><text x="44.2200%" y="63.50"></text></g><g><title>&lt;mio_misc::queue::NotificationQueue as mio_misc::queue::Notifier&gt;::notify (359 samples, 4.56%)</title><rect x="39.4841%" y="181" width="4.5622%" height="15" fill="rgb(238,83,0)" fg:x="3107" fg:w="359"/><text x="39.7341%" y="191.50">&lt;mio_..</text></g><g><title>mio_misc::queue::NotificationQueue::push (351 samples, 4.46%)</title><rect x="39.5857%" y="165" width="4.4605%" height="15" fill="rgb(221,39,39)" fg:x="3115" fg:w="351"/><text x="39.8357%" y="175.50">mio_m..</text></g><g><title>mio::waker::Waker::wake (3 samples, 0.04%)</title><rect x="44.0081%" y="149" width="0.0381%" height="15" fill="rgb(222,119,46)" fg:x="3463" fg:w="3"/><text x="44.2581%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9 samples, 0.11%)</title><rect x="44.0463%" y="181" width="0.1144%" height="15" fill="rgb(222,165,49)" fg:x="3466" fg:w="9"/><text x="44.2963%" y="191.50"></text></g><g><title>mio_misc::channel::Sender&lt;T&gt;::send (1 samples, 0.01%)</title><rect x="44.1606%" y="181" width="0.0127%" height="15" fill="rgb(219,113,52)" fg:x="3475" fg:w="1"/><text x="44.4106%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.03%)</title><rect x="44.4783%" y="165" width="0.0254%" height="15" fill="rgb(214,7,15)" fg:x="3500" fg:w="2"/><text x="44.7283%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.03%)</title><rect x="44.5673%" y="149" width="0.0254%" height="15" fill="rgb(235,32,4)" fg:x="3507" fg:w="2"/><text x="44.8173%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.03%)</title><rect x="44.5673%" y="133" width="0.0254%" height="15" fill="rgb(238,90,54)" fg:x="3507" fg:w="2"/><text x="44.8173%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicIsize::fetch_add (66 samples, 0.84%)</title><rect x="44.5927%" y="149" width="0.8387%" height="15" fill="rgb(213,208,19)" fg:x="3509" fg:w="66"/><text x="44.8427%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_add (66 samples, 0.84%)</title><rect x="44.5927%" y="133" width="0.8387%" height="15" fill="rgb(233,156,4)" fg:x="3509" fg:w="66"/><text x="44.8427%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1 samples, 0.01%)</title><rect x="45.4314%" y="149" width="0.0127%" height="15" fill="rgb(207,194,5)" fg:x="3575" fg:w="1"/><text x="45.6814%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="45.4314%" y="133" width="0.0127%" height="15" fill="rgb(206,111,30)" fg:x="3575" fg:w="1"/><text x="45.6814%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (16 samples, 0.20%)</title><rect x="45.4441%" y="133" width="0.2033%" height="15" fill="rgb(243,70,54)" fg:x="3576" fg:w="16"/><text x="45.6941%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_store (16 samples, 0.20%)</title><rect x="45.4441%" y="117" width="0.2033%" height="15" fill="rgb(242,28,8)" fg:x="3576" fg:w="16"/><text x="45.6941%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (90 samples, 1.14%)</title><rect x="45.6475%" y="133" width="1.1437%" height="15" fill="rgb(219,106,18)" fg:x="3592" fg:w="90"/><text x="45.8975%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_swap (90 samples, 1.14%)</title><rect x="45.6475%" y="117" width="1.1437%" height="15" fill="rgb(244,222,10)" fg:x="3592" fg:w="90"/><text x="45.8975%" y="127.50"></text></g><g><title>winit::platform_impl::platform::sticky_exit_callback (657 samples, 8.35%)</title><rect x="38.6834%" y="277" width="8.3492%" height="15" fill="rgb(236,179,52)" fg:x="3044" fg:w="657"/><text x="38.9334%" y="287.50">winit::platf..</text></g><g><title>hikari_core::game::Game::run::{{closure}} (626 samples, 7.96%)</title><rect x="39.0774%" y="261" width="7.9553%" height="15" fill="rgb(213,23,39)" fg:x="3075" fg:w="626"/><text x="39.3274%" y="271.50">hikari_core..</text></g><g><title>winit::window::Window::request_redraw (610 samples, 7.75%)</title><rect x="39.2807%" y="245" width="7.7519%" height="15" fill="rgb(238,48,10)" fg:x="3091" fg:w="610"/><text x="39.5307%" y="255.50">winit::wind..</text></g><g><title>winit::platform_impl::platform::Window::request_redraw (610 samples, 7.75%)</title><rect x="39.2807%" y="229" width="7.7519%" height="15" fill="rgb(251,196,23)" fg:x="3091" fg:w="610"/><text x="39.5307%" y="239.50">winit::plat..</text></g><g><title>winit::platform_impl::platform::x11::window::UnownedWindow::request_redraw (607 samples, 7.71%)</title><rect x="39.3188%" y="213" width="7.7138%" height="15" fill="rgb(250,152,24)" fg:x="3094" fg:w="607"/><text x="39.5688%" y="223.50">winit::plat..</text></g><g><title>mio_misc::channel::Sender&lt;T&gt;::send (602 samples, 7.65%)</title><rect x="39.3824%" y="197" width="7.6503%" height="15" fill="rgb(209,150,17)" fg:x="3099" fg:w="602"/><text x="39.6324%" y="207.50">mio_misc::..</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (225 samples, 2.86%)</title><rect x="44.1733%" y="181" width="2.8593%" height="15" fill="rgb(234,202,34)" fg:x="3476" fg:w="225"/><text x="44.4233%" y="191.50">st..</text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::send (199 samples, 2.53%)</title><rect x="44.5037%" y="165" width="2.5289%" height="15" fill="rgb(253,148,53)" fg:x="3502" fg:w="199"/><text x="44.7537%" y="175.50">st..</text></g><g><title>std::sync::mpsc::mpsc_queue::Queue&lt;T&gt;::push (125 samples, 1.59%)</title><rect x="45.4441%" y="149" width="1.5885%" height="15" fill="rgb(218,129,16)" fg:x="3576" fg:w="125"/><text x="45.6941%" y="159.50"></text></g><g><title>std::sync::mpsc::mpsc_queue::Node&lt;T&gt;::new (19 samples, 0.24%)</title><rect x="46.7912%" y="133" width="0.2415%" height="15" fill="rgb(216,85,19)" fg:x="3682" fg:w="19"/><text x="47.0412%" y="143.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.20%)</title><rect x="46.8293%" y="117" width="0.2033%" height="15" fill="rgb(235,228,7)" fg:x="3685" fg:w="16"/><text x="47.0793%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.20%)</title><rect x="46.8293%" y="101" width="0.2033%" height="15" fill="rgb(245,175,0)" fg:x="3685" fg:w="16"/><text x="47.0793%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.20%)</title><rect x="46.8293%" y="85" width="0.2033%" height="15" fill="rgb(208,168,36)" fg:x="3685" fg:w="16"/><text x="47.0793%" y="95.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.20%)</title><rect x="46.8293%" y="69" width="0.2033%" height="15" fill="rgb(246,171,24)" fg:x="3685" fg:w="16"/><text x="47.0793%" y="79.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.18%)</title><rect x="46.8547%" y="53" width="0.1779%" height="15" fill="rgb(215,142,24)" fg:x="3687" fg:w="14"/><text x="47.1047%" y="63.50"></text></g><g><title>[libX11.so.6.4.0] (159 samples, 2.02%)</title><rect x="48.7101%" y="229" width="2.0206%" height="15" fill="rgb(250,187,7)" fg:x="3833" fg:w="159"/><text x="48.9601%" y="239.50">[..</text></g><g><title>__GI___pthread_mutex_lock (133 samples, 1.69%)</title><rect x="49.0405%" y="213" width="1.6902%" height="15" fill="rgb(228,66,33)" fg:x="3859" fg:w="133"/><text x="49.2905%" y="223.50"></text></g><g><title>__errno_location (1 samples, 0.01%)</title><rect x="55.5217%" y="149" width="0.0127%" height="15" fill="rgb(234,215,21)" fg:x="4369" fg:w="1"/><text x="55.7717%" y="159.50"></text></g><g><title>[libxcb.so.1.1.0] (468 samples, 5.95%)</title><rect x="54.4034%" y="165" width="5.9474%" height="15" fill="rgb(222,191,20)" fg:x="4281" fg:w="468"/><text x="54.6534%" y="175.50">[libxcb...</text></g><g><title>__libc_recvmsg (379 samples, 4.82%)</title><rect x="55.5344%" y="149" width="4.8164%" height="15" fill="rgb(245,79,54)" fg:x="4370" fg:w="379"/><text x="55.7844%" y="159.50">__libc..</text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="60.3507%" y="165" width="0.0127%" height="15" fill="rgb(240,10,37)" fg:x="4749" fg:w="1"/><text x="60.6007%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (301 samples, 3.83%)</title><rect x="60.3635%" y="165" width="3.8251%" height="15" fill="rgb(214,192,32)" fg:x="4750" fg:w="301"/><text x="60.6135%" y="175.50">__GI..</text></g><g><title>__GI___pthread_mutex_unlock (8 samples, 0.10%)</title><rect x="64.1886%" y="165" width="0.1017%" height="15" fill="rgb(209,36,54)" fg:x="5051" fg:w="8"/><text x="64.4386%" y="175.50"></text></g><g><title>[libxcb.so.1.1.0] (1,147 samples, 14.58%)</title><rect x="53.6155%" y="181" width="14.5762%" height="15" fill="rgb(220,10,11)" fg:x="4219" fg:w="1147"/><text x="53.8655%" y="191.50">[libxcb.so.1.1.0]</text></g><g><title>__pthread_mutex_unlock_usercnt (307 samples, 3.90%)</title><rect x="64.2903%" y="165" width="3.9014%" height="15" fill="rgb(221,106,17)" fg:x="5059" fg:w="307"/><text x="64.5403%" y="175.50">__pt..</text></g><g><title>xcb_poll_for_event (3 samples, 0.04%)</title><rect x="68.1916%" y="181" width="0.0381%" height="15" fill="rgb(251,142,44)" fg:x="5366" fg:w="3"/><text x="68.4416%" y="191.50"></text></g><g><title>[libX11.so.6.4.0] (1,260 samples, 16.01%)</title><rect x="52.4717%" y="197" width="16.0122%" height="15" fill="rgb(238,13,15)" fg:x="4129" fg:w="1260"/><text x="52.7217%" y="207.50">[libX11.so.6.4.0]</text></g><g><title>xcb_poll_for_queued_event (20 samples, 0.25%)</title><rect x="68.2298%" y="181" width="0.2542%" height="15" fill="rgb(208,107,27)" fg:x="5369" fg:w="20"/><text x="68.4798%" y="191.50"></text></g><g><title>_XEnq (1 samples, 0.01%)</title><rect x="68.4839%" y="197" width="0.0127%" height="15" fill="rgb(205,136,37)" fg:x="5389" fg:w="1"/><text x="68.7339%" y="207.50"></text></g><g><title>_XWireToEvent (1 samples, 0.01%)</title><rect x="68.4839%" y="181" width="0.0127%" height="15" fill="rgb(250,205,27)" fg:x="5389" fg:w="1"/><text x="68.7339%" y="191.50"></text></g><g><title>__errno_location (9 samples, 0.11%)</title><rect x="70.6189%" y="165" width="0.1144%" height="15" fill="rgb(210,80,43)" fg:x="5557" fg:w="9"/><text x="70.8689%" y="175.50"></text></g><g><title>[libxcb.so.1.1.0] (506 samples, 6.43%)</title><rect x="69.0685%" y="181" width="6.4303%" height="15" fill="rgb(247,160,36)" fg:x="5435" fg:w="506"/><text x="69.3185%" y="191.50">[libxcb...</text></g><g><title>__libc_recvmsg (375 samples, 4.77%)</title><rect x="70.7333%" y="165" width="4.7655%" height="15" fill="rgb(234,13,49)" fg:x="5566" fg:w="375"/><text x="70.9833%" y="175.50">__libc..</text></g><g><title>__GI___pthread_mutex_lock (151 samples, 1.92%)</title><rect x="75.4988%" y="181" width="1.9189%" height="15" fill="rgb(234,122,0)" fg:x="5941" fg:w="151"/><text x="75.7488%" y="191.50">_..</text></g><g><title>__GI___pthread_mutex_unlock (9 samples, 0.11%)</title><rect x="77.4177%" y="181" width="0.1144%" height="15" fill="rgb(207,146,38)" fg:x="6092" fg:w="9"/><text x="77.6677%" y="191.50"></text></g><g><title>[libX11.so.6.4.0] (2,231 samples, 28.35%)</title><rect x="51.0357%" y="213" width="28.3518%" height="15" fill="rgb(207,177,25)" fg:x="4016" fg:w="2231"/><text x="51.2857%" y="223.50">[libX11.so.6.4.0]</text></g><g><title>xcb_poll_for_reply64 (857 samples, 10.89%)</title><rect x="68.4966%" y="197" width="10.8908%" height="15" fill="rgb(211,178,42)" fg:x="5390" fg:w="857"/><text x="68.7466%" y="207.50">xcb_poll_for_rep..</text></g><g><title>__pthread_mutex_unlock_usercnt (146 samples, 1.86%)</title><rect x="77.5321%" y="181" width="1.8554%" height="15" fill="rgb(230,69,54)" fg:x="6101" fg:w="146"/><text x="77.7821%" y="191.50">_..</text></g><g><title>_XEventsQueued (2,262 samples, 28.75%)</title><rect x="50.7307%" y="229" width="28.7457%" height="15" fill="rgb(214,135,41)" fg:x="3992" fg:w="2262"/><text x="50.9807%" y="239.50">_XEventsQueued</text></g><g><title>xcb_connection_has_error (7 samples, 0.09%)</title><rect x="79.3875%" y="213" width="0.0890%" height="15" fill="rgb(237,67,25)" fg:x="6247" fg:w="7"/><text x="79.6375%" y="223.50"></text></g><g><title>_XFlush (21 samples, 0.27%)</title><rect x="79.4764%" y="229" width="0.2669%" height="15" fill="rgb(222,189,50)" fg:x="6254" fg:w="21"/><text x="79.7264%" y="239.50"></text></g><g><title>_XSend (11 samples, 0.14%)</title><rect x="79.6035%" y="213" width="0.1398%" height="15" fill="rgb(245,148,34)" fg:x="6264" fg:w="11"/><text x="79.8535%" y="223.50"></text></g><g><title>XCheckIfEvent (2,595 samples, 32.98%)</title><rect x="47.8714%" y="245" width="32.9775%" height="15" fill="rgb(222,29,6)" fg:x="3767" fg:w="2595"/><text x="48.1214%" y="255.50">XCheckIfEvent</text></g><g><title>__pthread_mutex_unlock_usercnt (87 samples, 1.11%)</title><rect x="79.7433%" y="229" width="1.1056%" height="15" fill="rgb(221,189,43)" fg:x="6275" fg:w="87"/><text x="79.9933%" y="239.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll_one_event (2,663 samples, 33.84%)</title><rect x="47.0327%" y="261" width="33.8417%" height="15" fill="rgb(207,36,27)" fg:x="3701" fg:w="2663"/><text x="47.2827%" y="271.50">winit::platform_impl::platform::x11::event_processor::E..</text></g><g><title>winit::platform_impl::platform::x11::get_xtarget (2 samples, 0.03%)</title><rect x="80.8489%" y="245" width="0.0254%" height="15" fill="rgb(217,90,24)" fg:x="6362" fg:w="2"/><text x="81.0989%" y="255.50"></text></g><g><title>XFilterEvent (1 samples, 0.01%)</title><rect x="80.8743%" y="245" width="0.0127%" height="15" fill="rgb(224,66,35)" fg:x="6364" fg:w="1"/><text x="81.1243%" y="255.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.01%)</title><rect x="80.8743%" y="229" width="0.0127%" height="15" fill="rgb(221,13,50)" fg:x="6364" fg:w="1"/><text x="81.1243%" y="239.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::process_event (6 samples, 0.08%)</title><rect x="80.8743%" y="261" width="0.0762%" height="15" fill="rgb(236,68,49)" fg:x="6364" fg:w="6"/><text x="81.1243%" y="271.50"></text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::handle_pressed_keys (5 samples, 0.06%)</title><rect x="80.8870%" y="245" width="0.0635%" height="15" fill="rgb(229,146,28)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="255.50"></text></g><g><title>winit::platform_impl::platform::x11::util::keys::&lt;impl winit::platform_impl::platform::x11::xdisplay::XConnection&gt;::query_keymap (5 samples, 0.06%)</title><rect x="80.8870%" y="229" width="0.0635%" height="15" fill="rgb(225,31,38)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="239.50"></text></g><g><title>XQueryKeymap (5 samples, 0.06%)</title><rect x="80.8870%" y="213" width="0.0635%" height="15" fill="rgb(250,208,3)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="223.50"></text></g><g><title>_XReply (5 samples, 0.06%)</title><rect x="80.8870%" y="197" width="0.0635%" height="15" fill="rgb(246,54,23)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="207.50"></text></g><g><title>xcb_wait_for_reply64 (5 samples, 0.06%)</title><rect x="80.8870%" y="181" width="0.0635%" height="15" fill="rgb(243,76,11)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="191.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="80.8870%" y="165" width="0.0635%" height="15" fill="rgb(245,21,50)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="175.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.06%)</title><rect x="80.8870%" y="149" width="0.0635%" height="15" fill="rgb(228,9,43)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="159.50"></text></g><g><title>__GI___poll (5 samples, 0.06%)</title><rect x="80.8870%" y="133" width="0.0635%" height="15" fill="rgb(208,100,47)" fg:x="6365" fg:w="5"/><text x="81.1370%" y="143.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::drain_events (2,706 samples, 34.39%)</title><rect x="47.0327%" y="277" width="34.3881%" height="15" fill="rgb(232,26,8)" fg:x="3701" fg:w="2706"/><text x="47.2827%" y="287.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::drain..</text></g><g><title>winit::platform_impl::platform::x11::get_xtarget (37 samples, 0.47%)</title><rect x="80.9506%" y="261" width="0.4702%" height="15" fill="rgb(216,166,38)" fg:x="6370" fg:w="37"/><text x="81.2006%" y="271.50"></text></g><g><title>[libX11.so.6.4.0] (179 samples, 2.27%)</title><rect x="82.2468%" y="245" width="2.2747%" height="15" fill="rgb(251,202,51)" fg:x="6472" fg:w="179"/><text x="82.4968%" y="255.50">[..</text></g><g><title>__GI___pthread_mutex_lock (113 samples, 1.44%)</title><rect x="83.0855%" y="229" width="1.4360%" height="15" fill="rgb(254,216,34)" fg:x="6538" fg:w="113"/><text x="83.3355%" y="239.50"></text></g><g><title>__errno_location (2 samples, 0.03%)</title><rect x="86.6311%" y="165" width="0.0254%" height="15" fill="rgb(251,32,27)" fg:x="6817" fg:w="2"/><text x="86.8811%" y="175.50"></text></g><g><title>[libxcb.so.1.1.0] (231 samples, 2.94%)</title><rect x="86.0846%" y="181" width="2.9356%" height="15" fill="rgb(208,127,28)" fg:x="6774" fg:w="231"/><text x="86.3346%" y="191.50">[l..</text></g><g><title>__libc_recvmsg (186 samples, 2.36%)</title><rect x="86.6565%" y="165" width="2.3637%" height="15" fill="rgb(224,137,22)" fg:x="6819" fg:w="186"/><text x="86.9065%" y="175.50">__..</text></g><g><title>__GI___pthread_mutex_lock (152 samples, 1.93%)</title><rect x="89.0202%" y="181" width="1.9316%" height="15" fill="rgb(254,70,32)" fg:x="7005" fg:w="152"/><text x="89.2702%" y="191.50">_..</text></g><g><title>__GI___pthread_mutex_unlock (7 samples, 0.09%)</title><rect x="90.9518%" y="181" width="0.0890%" height="15" fill="rgb(229,75,37)" fg:x="7157" fg:w="7"/><text x="91.2018%" y="191.50"></text></g><g><title>[libxcb.so.1.1.0] (573 samples, 7.28%)</title><rect x="85.7034%" y="197" width="7.2817%" height="15" fill="rgb(252,64,23)" fg:x="6744" fg:w="573"/><text x="85.9534%" y="207.50">[libxcb.so..</text></g><g><title>__pthread_mutex_unlock_usercnt (153 samples, 1.94%)</title><rect x="91.0408%" y="181" width="1.9443%" height="15" fill="rgb(232,162,48)" fg:x="7164" fg:w="153"/><text x="91.2908%" y="191.50">_..</text></g><g><title>xcb_poll_for_event (1 samples, 0.01%)</title><rect x="92.9851%" y="197" width="0.0127%" height="15" fill="rgb(246,160,12)" fg:x="7317" fg:w="1"/><text x="93.2351%" y="207.50"></text></g><g><title>[libX11.so.6.4.0] (635 samples, 8.07%)</title><rect x="85.1061%" y="213" width="8.0696%" height="15" fill="rgb(247,166,0)" fg:x="6697" fg:w="635"/><text x="85.3561%" y="223.50">[libX11.so...</text></g><g><title>xcb_poll_for_queued_event (14 samples, 0.18%)</title><rect x="92.9978%" y="197" width="0.1779%" height="15" fill="rgb(249,219,21)" fg:x="7318" fg:w="14"/><text x="93.2478%" y="207.50"></text></g><g><title>__errno_location (3 samples, 0.04%)</title><rect x="94.2178%" y="181" width="0.0381%" height="15" fill="rgb(205,209,3)" fg:x="7414" fg:w="3"/><text x="94.4678%" y="191.50"></text></g><g><title>[libxcb.so.1.1.0] (228 samples, 2.90%)</title><rect x="93.4299%" y="197" width="2.8974%" height="15" fill="rgb(243,44,1)" fg:x="7352" fg:w="228"/><text x="93.6799%" y="207.50">[l..</text></g><g><title>__libc_recvmsg (163 samples, 2.07%)</title><rect x="94.2559%" y="181" width="2.0714%" height="15" fill="rgb(206,159,16)" fg:x="7417" fg:w="163"/><text x="94.5059%" y="191.50">_..</text></g><g><title>__GI___pthread_mutex_lock (56 samples, 0.71%)</title><rect x="96.3274%" y="197" width="0.7117%" height="15" fill="rgb(244,77,30)" fg:x="7580" fg:w="56"/><text x="96.5774%" y="207.50"></text></g><g><title>__GI___pthread_mutex_unlock (4 samples, 0.05%)</title><rect x="97.0390%" y="197" width="0.0508%" height="15" fill="rgb(218,69,12)" fg:x="7636" fg:w="4"/><text x="97.2890%" y="207.50"></text></g><g><title>[libX11.so.6.4.0] (1,081 samples, 13.74%)</title><rect x="84.6867%" y="229" width="13.7375%" height="15" fill="rgb(212,87,7)" fg:x="6664" fg:w="1081"/><text x="84.9367%" y="239.50">[libX11.so.6.4.0]</text></g><g><title>xcb_poll_for_reply64 (413 samples, 5.25%)</title><rect x="93.1758%" y="213" width="5.2484%" height="15" fill="rgb(245,114,25)" fg:x="7332" fg:w="413"/><text x="93.4258%" y="223.50">xcb_po..</text></g><g><title>__pthread_mutex_unlock_usercnt (105 samples, 1.33%)</title><rect x="97.0898%" y="197" width="1.3343%" height="15" fill="rgb(210,61,42)" fg:x="7640" fg:w="105"/><text x="97.3398%" y="207.50"></text></g><g><title>_XSend (10 samples, 0.13%)</title><rect x="98.4242%" y="229" width="0.1271%" height="15" fill="rgb(211,52,33)" fg:x="7745" fg:w="10"/><text x="98.6742%" y="239.50"></text></g><g><title>_XEventsQueued (1,108 samples, 14.08%)</title><rect x="84.5215%" y="245" width="14.0806%" height="15" fill="rgb(234,58,33)" fg:x="6651" fg:w="1108"/><text x="84.7715%" y="255.50">_XEventsQueued</text></g><g><title>xcb_connection_has_error (4 samples, 0.05%)</title><rect x="98.5513%" y="229" width="0.0508%" height="15" fill="rgb(220,115,36)" fg:x="7755" fg:w="4"/><text x="98.8013%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (5 samples, 0.06%)</title><rect x="98.6021%" y="245" width="0.0635%" height="15" fill="rgb(243,153,54)" fg:x="7759" fg:w="5"/><text x="98.8521%" y="255.50"></text></g><g><title>XPending (1,386 samples, 17.61%)</title><rect x="81.9164%" y="261" width="17.6134%" height="15" fill="rgb(251,47,18)" fg:x="6446" fg:w="1386"/><text x="82.1664%" y="271.50">XPending</text></g><g><title>__pthread_mutex_unlock_usercnt (68 samples, 0.86%)</title><rect x="98.6657%" y="245" width="0.8642%" height="15" fill="rgb(242,102,42)" fg:x="7764" fg:w="68"/><text x="98.9157%" y="255.50"></text></g><g><title>__libc_start_main (6,682 samples, 84.92%)</title><rect x="14.7668%" y="597" width="84.9155%" height="15" fill="rgb(234,31,38)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="607.50">__libc_start_main</text></g><g><title>main (6,682 samples, 84.92%)</title><rect x="14.7668%" y="581" width="84.9155%" height="15" fill="rgb(221,117,51)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (6,682 samples, 84.92%)</title><rect x="14.7668%" y="565" width="84.9155%" height="15" fill="rgb(212,20,18)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (6,682 samples, 84.92%)</title><rect x="14.7668%" y="549" width="84.9155%" height="15" fill="rgb(245,133,36)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,682 samples, 84.92%)</title><rect x="14.7668%" y="533" width="84.9155%" height="15" fill="rgb(212,6,19)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,682 samples, 84.92%)</title><rect x="14.7668%" y="517" width="84.9155%" height="15" fill="rgb(218,1,36)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6,682 samples, 84.92%)</title><rect x="14.7668%" y="501" width="84.9155%" height="15" fill="rgb(246,84,54)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="511.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (6,682 samples, 84.92%)</title><rect x="14.7668%" y="485" width="84.9155%" height="15" fill="rgb(242,110,6)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,682 samples, 84.92%)</title><rect x="14.7668%" y="469" width="84.9155%" height="15" fill="rgb(214,47,5)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,682 samples, 84.92%)</title><rect x="14.7668%" y="453" width="84.9155%" height="15" fill="rgb(218,159,25)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6,682 samples, 84.92%)</title><rect x="14.7668%" y="437" width="84.9155%" height="15" fill="rgb(215,211,28)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (6,682 samples, 84.92%)</title><rect x="14.7668%" y="421" width="84.9155%" height="15" fill="rgb(238,59,32)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,682 samples, 84.92%)</title><rect x="14.7668%" y="405" width="84.9155%" height="15" fill="rgb(226,82,3)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (6,682 samples, 84.92%)</title><rect x="14.7668%" y="389" width="84.9155%" height="15" fill="rgb(240,164,32)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>hikari_editor::main (6,682 samples, 84.92%)</title><rect x="14.7668%" y="373" width="84.9155%" height="15" fill="rgb(232,46,7)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="383.50">hikari_editor::main</text></g><g><title>hikari_core::game::Game::run (6,682 samples, 84.92%)</title><rect x="14.7668%" y="357" width="84.9155%" height="15" fill="rgb(229,129,53)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="367.50">hikari_core::game::Game::run</text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (6,682 samples, 84.92%)</title><rect x="14.7668%" y="341" width="84.9155%" height="15" fill="rgb(234,188,29)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="351.50">winit::event_loop::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (6,682 samples, 84.92%)</title><rect x="14.7668%" y="325" width="84.9155%" height="15" fill="rgb(246,141,4)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="335.50">winit::platform_impl::platform::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (6,682 samples, 84.92%)</title><rect x="14.7668%" y="309" width="84.9155%" height="15" fill="rgb(229,23,39)" fg:x="1162" fg:w="6682"/><text x="15.0168%" y="319.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return (6,671 samples, 84.78%)</title><rect x="14.9066%" y="293" width="84.7757%" height="15" fill="rgb(206,12,3)" fg:x="1173" fg:w="6671"/><text x="15.1566%" y="303.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return</text></g><g><title>winit::platform_impl::platform::x11::event_processor::EventProcessor&lt;T&gt;::poll (1,437 samples, 18.26%)</title><rect x="81.4208%" y="277" width="18.2615%" height="15" fill="rgb(252,226,20)" fg:x="6407" fg:w="1437"/><text x="81.6708%" y="287.50">winit::platform_impl::platfo..</text></g><g><title>winit::platform_impl::platform::x11::get_xtarget (12 samples, 0.15%)</title><rect x="99.5298%" y="261" width="0.1525%" height="15" fill="rgb(216,123,35)" fg:x="7832" fg:w="12"/><text x="99.7798%" y="271.50"></text></g><g><title>_start (6,688 samples, 84.99%)</title><rect x="14.7033%" y="613" width="84.9917%" height="15" fill="rgb(212,68,40)" fg:x="1157" fg:w="6688"/><text x="14.9533%" y="623.50">_start</text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.6823%" y="597" width="0.0127%" height="15" fill="rgb(254,125,32)" fg:x="7844" fg:w="1"/><text x="99.9323%" y="607.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.6823%" y="581" width="0.0127%" height="15" fill="rgb(253,97,22)" fg:x="7844" fg:w="1"/><text x="99.9323%" y="591.50"></text></g><g><title>dl_main (1 samples, 0.01%)</title><rect x="99.6823%" y="565" width="0.0127%" height="15" fill="rgb(241,101,14)" fg:x="7844" fg:w="1"/><text x="99.9323%" y="575.50"></text></g><g><title>all (7,869 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="7869"/><text x="0.2500%" y="655.50"></text></g><g><title>hikari_editor (7,869 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(233,195,47)" fg:x="0" fg:w="7869"/><text x="0.2500%" y="639.50">hikari_editor</text></g><g><title>epoll_wait (24 samples, 0.30%)</title><rect x="99.6950%" y="613" width="0.3050%" height="15" fill="rgb(246,218,30)" fg:x="7845" fg:w="24"/><text x="99.9450%" y="623.50"></text></g></svg></svg>